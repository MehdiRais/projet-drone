
test_pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003558  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  080036f0  080036f0  000136f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800376c  0800376c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800376c  0800376c  0001376c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003774  08003774  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003774  08003774  00013774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003778  08003778  00013778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800377c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000070  080037ec  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  080037ec  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ea2e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c5e  00000000  00000000  0002eace  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd0  00000000  00000000  00030730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b28  00000000  00000000  00031300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000175a1  00000000  00000000  00031e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d742  00000000  00000000  000493c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f862  00000000  00000000  00056b0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e636d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000377c  00000000  00000000  000e63c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000070 	.word	0x20000070
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080036d8 	.word	0x080036d8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000074 	.word	0x20000074
 80001d4:	080036d8 	.word	0x080036d8

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d4:	f000 fb8a 	bl	8000bec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 f81c 	bl	8000514 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004dc:	f000 f918 	bl	8000710 <MX_GPIO_Init>
  MX_TIM2_Init();
 80004e0:	f000 f876 	bl	80005d0 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80004e4:	f000 f8ea 	bl	80006bc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart2);
 80004e8:	4808      	ldr	r0, [pc, #32]	; (800050c <main+0x3c>)
 80004ea:	f000 f96b 	bl	80007c4 <RetargetInit>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80004ee:	2100      	movs	r1, #0
 80004f0:	4807      	ldr	r0, [pc, #28]	; (8000510 <main+0x40>)
 80004f2:	f001 fb85 	bl	8001c00 <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */
  HAL_Delay(10000);
 80004f6:	f242 7010 	movw	r0, #10000	; 0x2710
 80004fa:	f000 fbe9 	bl	8000cd0 <HAL_Delay>
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 500);
 80004fe:	4b04      	ldr	r3, [pc, #16]	; (8000510 <main+0x40>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000506:	635a      	str	r2, [r3, #52]	; 0x34


  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8000508:	e7fe      	b.n	8000508 <main+0x38>
 800050a:	bf00      	nop
 800050c:	200000e0 	.word	0x200000e0
 8000510:	20000098 	.word	0x20000098

08000514 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b094      	sub	sp, #80	; 0x50
 8000518:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051a:	f107 0320 	add.w	r3, r7, #32
 800051e:	2230      	movs	r2, #48	; 0x30
 8000520:	2100      	movs	r1, #0
 8000522:	4618      	mov	r0, r3
 8000524:	f002 fcc2 	bl	8002eac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000528:	f107 030c 	add.w	r3, r7, #12
 800052c:	2200      	movs	r2, #0
 800052e:	601a      	str	r2, [r3, #0]
 8000530:	605a      	str	r2, [r3, #4]
 8000532:	609a      	str	r2, [r3, #8]
 8000534:	60da      	str	r2, [r3, #12]
 8000536:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000538:	2300      	movs	r3, #0
 800053a:	60bb      	str	r3, [r7, #8]
 800053c:	4b22      	ldr	r3, [pc, #136]	; (80005c8 <SystemClock_Config+0xb4>)
 800053e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000540:	4a21      	ldr	r2, [pc, #132]	; (80005c8 <SystemClock_Config+0xb4>)
 8000542:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000546:	6413      	str	r3, [r2, #64]	; 0x40
 8000548:	4b1f      	ldr	r3, [pc, #124]	; (80005c8 <SystemClock_Config+0xb4>)
 800054a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800054c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000550:	60bb      	str	r3, [r7, #8]
 8000552:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000554:	2300      	movs	r3, #0
 8000556:	607b      	str	r3, [r7, #4]
 8000558:	4b1c      	ldr	r3, [pc, #112]	; (80005cc <SystemClock_Config+0xb8>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4a1b      	ldr	r2, [pc, #108]	; (80005cc <SystemClock_Config+0xb8>)
 800055e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000562:	6013      	str	r3, [r2, #0]
 8000564:	4b19      	ldr	r3, [pc, #100]	; (80005cc <SystemClock_Config+0xb8>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800056c:	607b      	str	r3, [r7, #4]
 800056e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000570:	2302      	movs	r3, #2
 8000572:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000574:	2301      	movs	r3, #1
 8000576:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000578:	2310      	movs	r3, #16
 800057a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800057c:	2300      	movs	r3, #0
 800057e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000580:	f107 0320 	add.w	r3, r7, #32
 8000584:	4618      	mov	r0, r3
 8000586:	f000 fe4b 	bl	8001220 <HAL_RCC_OscConfig>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000590:	f000 f912 	bl	80007b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000594:	230f      	movs	r3, #15
 8000596:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000598:	2300      	movs	r3, #0
 800059a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059c:	2300      	movs	r3, #0
 800059e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005a0:	2300      	movs	r3, #0
 80005a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a4:	2300      	movs	r3, #0
 80005a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005a8:	f107 030c 	add.w	r3, r7, #12
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f001 f8ae 	bl	8001710 <HAL_RCC_ClockConfig>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80005ba:	f000 f8fd 	bl	80007b8 <Error_Handler>
  }
}
 80005be:	bf00      	nop
 80005c0:	3750      	adds	r7, #80	; 0x50
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	40023800 	.word	0x40023800
 80005cc:	40007000 	.word	0x40007000

080005d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b08e      	sub	sp, #56	; 0x38
 80005d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
 80005de:	605a      	str	r2, [r3, #4]
 80005e0:	609a      	str	r2, [r3, #8]
 80005e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005e4:	f107 0320 	add.w	r3, r7, #32
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005ee:	1d3b      	adds	r3, r7, #4
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
 80005fa:	611a      	str	r2, [r3, #16]
 80005fc:	615a      	str	r2, [r3, #20]
 80005fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000600:	4b2d      	ldr	r3, [pc, #180]	; (80006b8 <MX_TIM2_Init+0xe8>)
 8000602:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000606:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000608:	4b2b      	ldr	r3, [pc, #172]	; (80006b8 <MX_TIM2_Init+0xe8>)
 800060a:	2200      	movs	r2, #0
 800060c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800060e:	4b2a      	ldr	r3, [pc, #168]	; (80006b8 <MX_TIM2_Init+0xe8>)
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000;
 8000614:	4b28      	ldr	r3, [pc, #160]	; (80006b8 <MX_TIM2_Init+0xe8>)
 8000616:	f241 3288 	movw	r2, #5000	; 0x1388
 800061a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800061c:	4b26      	ldr	r3, [pc, #152]	; (80006b8 <MX_TIM2_Init+0xe8>)
 800061e:	2200      	movs	r2, #0
 8000620:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000622:	4b25      	ldr	r3, [pc, #148]	; (80006b8 <MX_TIM2_Init+0xe8>)
 8000624:	2280      	movs	r2, #128	; 0x80
 8000626:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000628:	4823      	ldr	r0, [pc, #140]	; (80006b8 <MX_TIM2_Init+0xe8>)
 800062a:	f001 fa41 	bl	8001ab0 <HAL_TIM_Base_Init>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000634:	f000 f8c0 	bl	80007b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000638:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800063c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800063e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000642:	4619      	mov	r1, r3
 8000644:	481c      	ldr	r0, [pc, #112]	; (80006b8 <MX_TIM2_Init+0xe8>)
 8000646:	f001 fc4d 	bl	8001ee4 <HAL_TIM_ConfigClockSource>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000650:	f000 f8b2 	bl	80007b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000654:	4818      	ldr	r0, [pc, #96]	; (80006b8 <MX_TIM2_Init+0xe8>)
 8000656:	f001 fa7a 	bl	8001b4e <HAL_TIM_PWM_Init>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000660:	f000 f8aa 	bl	80007b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000664:	2300      	movs	r3, #0
 8000666:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000668:	2300      	movs	r3, #0
 800066a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800066c:	f107 0320 	add.w	r3, r7, #32
 8000670:	4619      	mov	r1, r3
 8000672:	4811      	ldr	r0, [pc, #68]	; (80006b8 <MX_TIM2_Init+0xe8>)
 8000674:	f001 ffca 	bl	800260c <HAL_TIMEx_MasterConfigSynchronization>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800067e:	f000 f89b 	bl	80007b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000682:	2360      	movs	r3, #96	; 0x60
 8000684:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 2500;
 8000686:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800068a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800068c:	2300      	movs	r3, #0
 800068e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000690:	2300      	movs	r3, #0
 8000692:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000694:	1d3b      	adds	r3, r7, #4
 8000696:	2200      	movs	r2, #0
 8000698:	4619      	mov	r1, r3
 800069a:	4807      	ldr	r0, [pc, #28]	; (80006b8 <MX_TIM2_Init+0xe8>)
 800069c:	f001 fb60 	bl	8001d60 <HAL_TIM_PWM_ConfigChannel>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80006a6:	f000 f887 	bl	80007b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80006aa:	4803      	ldr	r0, [pc, #12]	; (80006b8 <MX_TIM2_Init+0xe8>)
 80006ac:	f000 f982 	bl	80009b4 <HAL_TIM_MspPostInit>

}
 80006b0:	bf00      	nop
 80006b2:	3738      	adds	r7, #56	; 0x38
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	20000098 	.word	0x20000098

080006bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006c0:	4b11      	ldr	r3, [pc, #68]	; (8000708 <MX_USART2_UART_Init+0x4c>)
 80006c2:	4a12      	ldr	r2, [pc, #72]	; (800070c <MX_USART2_UART_Init+0x50>)
 80006c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006c6:	4b10      	ldr	r3, [pc, #64]	; (8000708 <MX_USART2_UART_Init+0x4c>)
 80006c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ce:	4b0e      	ldr	r3, [pc, #56]	; (8000708 <MX_USART2_UART_Init+0x4c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006d4:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <MX_USART2_UART_Init+0x4c>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006da:	4b0b      	ldr	r3, [pc, #44]	; (8000708 <MX_USART2_UART_Init+0x4c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006e0:	4b09      	ldr	r3, [pc, #36]	; (8000708 <MX_USART2_UART_Init+0x4c>)
 80006e2:	220c      	movs	r2, #12
 80006e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e6:	4b08      	ldr	r3, [pc, #32]	; (8000708 <MX_USART2_UART_Init+0x4c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006ec:	4b06      	ldr	r3, [pc, #24]	; (8000708 <MX_USART2_UART_Init+0x4c>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006f2:	4805      	ldr	r0, [pc, #20]	; (8000708 <MX_USART2_UART_Init+0x4c>)
 80006f4:	f001 fff8 	bl	80026e8 <HAL_UART_Init>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006fe:	f000 f85b 	bl	80007b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	200000e0 	.word	0x200000e0
 800070c:	40004400 	.word	0x40004400

08000710 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b088      	sub	sp, #32
 8000714:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000716:	f107 030c 	add.w	r3, r7, #12
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]
 8000720:	609a      	str	r2, [r3, #8]
 8000722:	60da      	str	r2, [r3, #12]
 8000724:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	60bb      	str	r3, [r7, #8]
 800072a:	4b20      	ldr	r3, [pc, #128]	; (80007ac <MX_GPIO_Init+0x9c>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	4a1f      	ldr	r2, [pc, #124]	; (80007ac <MX_GPIO_Init+0x9c>)
 8000730:	f043 0304 	orr.w	r3, r3, #4
 8000734:	6313      	str	r3, [r2, #48]	; 0x30
 8000736:	4b1d      	ldr	r3, [pc, #116]	; (80007ac <MX_GPIO_Init+0x9c>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	f003 0304 	and.w	r3, r3, #4
 800073e:	60bb      	str	r3, [r7, #8]
 8000740:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	607b      	str	r3, [r7, #4]
 8000746:	4b19      	ldr	r3, [pc, #100]	; (80007ac <MX_GPIO_Init+0x9c>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a18      	ldr	r2, [pc, #96]	; (80007ac <MX_GPIO_Init+0x9c>)
 800074c:	f043 0301 	orr.w	r3, r3, #1
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b16      	ldr	r3, [pc, #88]	; (80007ac <MX_GPIO_Init+0x9c>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f003 0301 	and.w	r3, r3, #1
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_PIN13_GPIO_Port, LED_PIN13_Pin, GPIO_PIN_RESET);
 800075e:	2200      	movs	r2, #0
 8000760:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000764:	4812      	ldr	r0, [pc, #72]	; (80007b0 <MX_GPIO_Init+0xa0>)
 8000766:	f000 fd41 	bl	80011ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_PIN13_Pin */
  GPIO_InitStruct.Pin = LED_PIN13_Pin;
 800076a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800076e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000770:	2301      	movs	r3, #1
 8000772:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000774:	2300      	movs	r3, #0
 8000776:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000778:	2300      	movs	r3, #0
 800077a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_PIN13_GPIO_Port, &GPIO_InitStruct);
 800077c:	f107 030c 	add.w	r3, r7, #12
 8000780:	4619      	mov	r1, r3
 8000782:	480b      	ldr	r0, [pc, #44]	; (80007b0 <MX_GPIO_Init+0xa0>)
 8000784:	f000 fbae 	bl	8000ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEST_Pin */
  GPIO_InitStruct.Pin = TEST_Pin;
 8000788:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800078c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800078e:	2300      	movs	r3, #0
 8000790:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000792:	2300      	movs	r3, #0
 8000794:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(TEST_GPIO_Port, &GPIO_InitStruct);
 8000796:	f107 030c 	add.w	r3, r7, #12
 800079a:	4619      	mov	r1, r3
 800079c:	4805      	ldr	r0, [pc, #20]	; (80007b4 <MX_GPIO_Init+0xa4>)
 800079e:	f000 fba1 	bl	8000ee4 <HAL_GPIO_Init>

}
 80007a2:	bf00      	nop
 80007a4:	3720      	adds	r7, #32
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40023800 	.word	0x40023800
 80007b0:	40020800 	.word	0x40020800
 80007b4:	40020000 	.word	0x40020000

080007b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007bc:	b672      	cpsid	i
}
 80007be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c0:	e7fe      	b.n	80007c0 <Error_Handler+0x8>
	...

080007c4 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 80007cc:	4a07      	ldr	r2, [pc, #28]	; (80007ec <RetargetInit+0x28>)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 80007d2:	4b07      	ldr	r3, [pc, #28]	; (80007f0 <RetargetInit+0x2c>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	6898      	ldr	r0, [r3, #8]
 80007d8:	2300      	movs	r3, #0
 80007da:	2202      	movs	r2, #2
 80007dc:	2100      	movs	r1, #0
 80007de:	f002 fb6d 	bl	8002ebc <setvbuf>
}
 80007e2:	bf00      	nop
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	20000124 	.word	0x20000124
 80007f0:	2000000c 	.word	0x2000000c

080007f4 <_write>:

  errno = EBADF;
  return 0;
}

int _write(int fd, char* ptr, int len) {
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b086      	sub	sp, #24
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	60f8      	str	r0, [r7, #12]
 80007fc:	60b9      	str	r1, [r7, #8]
 80007fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	2b01      	cmp	r3, #1
 8000804:	d002      	beq.n	800080c <_write+0x18>
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	2b02      	cmp	r3, #2
 800080a:	d111      	bne.n	8000830 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 800080c:	4b0e      	ldr	r3, [pc, #56]	; (8000848 <_write+0x54>)
 800080e:	6818      	ldr	r0, [r3, #0]
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	b29a      	uxth	r2, r3
 8000814:	f04f 33ff 	mov.w	r3, #4294967295
 8000818:	68b9      	ldr	r1, [r7, #8]
 800081a:	f001 ffb2 	bl	8002782 <HAL_UART_Transmit>
 800081e:	4603      	mov	r3, r0
 8000820:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000822:	7dfb      	ldrb	r3, [r7, #23]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d101      	bne.n	800082c <_write+0x38>
      return len;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	e008      	b.n	800083e <_write+0x4a>
    else
      return EIO;
 800082c:	2305      	movs	r3, #5
 800082e:	e006      	b.n	800083e <_write+0x4a>
  }
  errno = EBADF;
 8000830:	f002 fb12 	bl	8002e58 <__errno>
 8000834:	4603      	mov	r3, r0
 8000836:	2209      	movs	r2, #9
 8000838:	601a      	str	r2, [r3, #0]
  return -1;
 800083a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800083e:	4618      	mov	r0, r3
 8000840:	3718      	adds	r7, #24
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	20000124 	.word	0x20000124

0800084c <_close>:

int _close(int fd) {
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	2b00      	cmp	r3, #0
 8000858:	db04      	blt.n	8000864 <_close+0x18>
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	2b02      	cmp	r3, #2
 800085e:	dc01      	bgt.n	8000864 <_close+0x18>
    return 0;
 8000860:	2300      	movs	r3, #0
 8000862:	e006      	b.n	8000872 <_close+0x26>

  errno = EBADF;
 8000864:	f002 faf8 	bl	8002e58 <__errno>
 8000868:	4603      	mov	r3, r0
 800086a:	2209      	movs	r2, #9
 800086c:	601a      	str	r2, [r3, #0]
  return -1;
 800086e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000872:	4618      	mov	r0, r3
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}

0800087a <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 800087a:	b580      	push	{r7, lr}
 800087c:	b084      	sub	sp, #16
 800087e:	af00      	add	r7, sp, #0
 8000880:	60f8      	str	r0, [r7, #12]
 8000882:	60b9      	str	r1, [r7, #8]
 8000884:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8000886:	f002 fae7 	bl	8002e58 <__errno>
 800088a:	4603      	mov	r3, r0
 800088c:	2209      	movs	r2, #9
 800088e:	601a      	str	r2, [r3, #0]
  return -1;
 8000890:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000894:	4618      	mov	r0, r3
 8000896:	3710      	adds	r7, #16
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}

0800089c <_read>:

int _read(int fd, char* ptr, int len) {
 800089c:	b580      	push	{r7, lr}
 800089e:	b086      	sub	sp, #24
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	60f8      	str	r0, [r7, #12]
 80008a4:	60b9      	str	r1, [r7, #8]
 80008a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d110      	bne.n	80008d0 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 80008ae:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <_read+0x4c>)
 80008b0:	6818      	ldr	r0, [r3, #0]
 80008b2:	f04f 33ff 	mov.w	r3, #4294967295
 80008b6:	2201      	movs	r2, #1
 80008b8:	68b9      	ldr	r1, [r7, #8]
 80008ba:	f001 fff4 	bl	80028a6 <HAL_UART_Receive>
 80008be:	4603      	mov	r3, r0
 80008c0:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80008c2:	7dfb      	ldrb	r3, [r7, #23]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d101      	bne.n	80008cc <_read+0x30>
      return 1;
 80008c8:	2301      	movs	r3, #1
 80008ca:	e008      	b.n	80008de <_read+0x42>
    else
      return EIO;
 80008cc:	2305      	movs	r3, #5
 80008ce:	e006      	b.n	80008de <_read+0x42>
  }
  errno = EBADF;
 80008d0:	f002 fac2 	bl	8002e58 <__errno>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2209      	movs	r2, #9
 80008d8:	601a      	str	r2, [r3, #0]
  return -1;
 80008da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008de:	4618      	mov	r0, r3
 80008e0:	3718      	adds	r7, #24
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	20000124 	.word	0x20000124

080008ec <_fstat>:

int _fstat(int fd, struct stat* st) {
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
 80008f4:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	db08      	blt.n	800090e <_fstat+0x22>
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	2b02      	cmp	r3, #2
 8000900:	dc05      	bgt.n	800090e <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000908:	605a      	str	r2, [r3, #4]
    return 0;
 800090a:	2300      	movs	r3, #0
 800090c:	e005      	b.n	800091a <_fstat+0x2e>
  }

  errno = EBADF;
 800090e:	f002 faa3 	bl	8002e58 <__errno>
 8000912:	4603      	mov	r3, r0
 8000914:	2209      	movs	r2, #9
 8000916:	601a      	str	r2, [r3, #0]
  return 0;
 8000918:	2300      	movs	r3, #0
}
 800091a:	4618      	mov	r0, r3
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
	...

08000924 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	607b      	str	r3, [r7, #4]
 800092e:	4b10      	ldr	r3, [pc, #64]	; (8000970 <HAL_MspInit+0x4c>)
 8000930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000932:	4a0f      	ldr	r2, [pc, #60]	; (8000970 <HAL_MspInit+0x4c>)
 8000934:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000938:	6453      	str	r3, [r2, #68]	; 0x44
 800093a:	4b0d      	ldr	r3, [pc, #52]	; (8000970 <HAL_MspInit+0x4c>)
 800093c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800093e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	603b      	str	r3, [r7, #0]
 800094a:	4b09      	ldr	r3, [pc, #36]	; (8000970 <HAL_MspInit+0x4c>)
 800094c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094e:	4a08      	ldr	r2, [pc, #32]	; (8000970 <HAL_MspInit+0x4c>)
 8000950:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000954:	6413      	str	r3, [r2, #64]	; 0x40
 8000956:	4b06      	ldr	r3, [pc, #24]	; (8000970 <HAL_MspInit+0x4c>)
 8000958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800095e:	603b      	str	r3, [r7, #0]
 8000960:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000962:	bf00      	nop
 8000964:	370c      	adds	r7, #12
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	40023800 	.word	0x40023800

08000974 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000974:	b480      	push	{r7}
 8000976:	b085      	sub	sp, #20
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000984:	d10d      	bne.n	80009a2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	60fb      	str	r3, [r7, #12]
 800098a:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <HAL_TIM_Base_MspInit+0x3c>)
 800098c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098e:	4a08      	ldr	r2, [pc, #32]	; (80009b0 <HAL_TIM_Base_MspInit+0x3c>)
 8000990:	f043 0301 	orr.w	r3, r3, #1
 8000994:	6413      	str	r3, [r2, #64]	; 0x40
 8000996:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <HAL_TIM_Base_MspInit+0x3c>)
 8000998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099a:	f003 0301 	and.w	r3, r3, #1
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80009a2:	bf00      	nop
 80009a4:	3714      	adds	r7, #20
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	40023800 	.word	0x40023800

080009b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b088      	sub	sp, #32
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009bc:	f107 030c 	add.w	r3, r7, #12
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	605a      	str	r2, [r3, #4]
 80009c6:	609a      	str	r2, [r3, #8]
 80009c8:	60da      	str	r2, [r3, #12]
 80009ca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009d4:	d11d      	bne.n	8000a12 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	60bb      	str	r3, [r7, #8]
 80009da:	4b10      	ldr	r3, [pc, #64]	; (8000a1c <HAL_TIM_MspPostInit+0x68>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	4a0f      	ldr	r2, [pc, #60]	; (8000a1c <HAL_TIM_MspPostInit+0x68>)
 80009e0:	f043 0301 	orr.w	r3, r3, #1
 80009e4:	6313      	str	r3, [r2, #48]	; 0x30
 80009e6:	4b0d      	ldr	r3, [pc, #52]	; (8000a1c <HAL_TIM_MspPostInit+0x68>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	f003 0301 	and.w	r3, r3, #1
 80009ee:	60bb      	str	r3, [r7, #8]
 80009f0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = PWM_Pin;
 80009f2:	2301      	movs	r3, #1
 80009f4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f6:	2302      	movs	r3, #2
 80009f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fe:	2300      	movs	r3, #0
 8000a00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000a02:	2301      	movs	r3, #1
 8000a04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_GPIO_Port, &GPIO_InitStruct);
 8000a06:	f107 030c 	add.w	r3, r7, #12
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4804      	ldr	r0, [pc, #16]	; (8000a20 <HAL_TIM_MspPostInit+0x6c>)
 8000a0e:	f000 fa69 	bl	8000ee4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000a12:	bf00      	nop
 8000a14:	3720      	adds	r7, #32
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40023800 	.word	0x40023800
 8000a20:	40020000 	.word	0x40020000

08000a24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08a      	sub	sp, #40	; 0x28
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2c:	f107 0314 	add.w	r3, r7, #20
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
 8000a36:	609a      	str	r2, [r3, #8]
 8000a38:	60da      	str	r2, [r3, #12]
 8000a3a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a19      	ldr	r2, [pc, #100]	; (8000aa8 <HAL_UART_MspInit+0x84>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d12b      	bne.n	8000a9e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	613b      	str	r3, [r7, #16]
 8000a4a:	4b18      	ldr	r3, [pc, #96]	; (8000aac <HAL_UART_MspInit+0x88>)
 8000a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4e:	4a17      	ldr	r2, [pc, #92]	; (8000aac <HAL_UART_MspInit+0x88>)
 8000a50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a54:	6413      	str	r3, [r2, #64]	; 0x40
 8000a56:	4b15      	ldr	r3, [pc, #84]	; (8000aac <HAL_UART_MspInit+0x88>)
 8000a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a5e:	613b      	str	r3, [r7, #16]
 8000a60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	60fb      	str	r3, [r7, #12]
 8000a66:	4b11      	ldr	r3, [pc, #68]	; (8000aac <HAL_UART_MspInit+0x88>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	4a10      	ldr	r2, [pc, #64]	; (8000aac <HAL_UART_MspInit+0x88>)
 8000a6c:	f043 0301 	orr.w	r3, r3, #1
 8000a70:	6313      	str	r3, [r2, #48]	; 0x30
 8000a72:	4b0e      	ldr	r3, [pc, #56]	; (8000aac <HAL_UART_MspInit+0x88>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	f003 0301 	and.w	r3, r3, #1
 8000a7a:	60fb      	str	r3, [r7, #12]
 8000a7c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a7e:	230c      	movs	r3, #12
 8000a80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a82:	2302      	movs	r3, #2
 8000a84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a8a:	2303      	movs	r3, #3
 8000a8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a8e:	2307      	movs	r3, #7
 8000a90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a92:	f107 0314 	add.w	r3, r7, #20
 8000a96:	4619      	mov	r1, r3
 8000a98:	4805      	ldr	r0, [pc, #20]	; (8000ab0 <HAL_UART_MspInit+0x8c>)
 8000a9a:	f000 fa23 	bl	8000ee4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a9e:	bf00      	nop
 8000aa0:	3728      	adds	r7, #40	; 0x28
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40004400 	.word	0x40004400
 8000aac:	40023800 	.word	0x40023800
 8000ab0:	40020000 	.word	0x40020000

08000ab4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ab8:	e7fe      	b.n	8000ab8 <NMI_Handler+0x4>

08000aba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aba:	b480      	push	{r7}
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000abe:	e7fe      	b.n	8000abe <HardFault_Handler+0x4>

08000ac0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ac4:	e7fe      	b.n	8000ac4 <MemManage_Handler+0x4>

08000ac6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aca:	e7fe      	b.n	8000aca <BusFault_Handler+0x4>

08000acc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ad0:	e7fe      	b.n	8000ad0 <UsageFault_Handler+0x4>

08000ad2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr

08000ae0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr

08000aee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aee:	b480      	push	{r7}
 8000af0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000af2:	bf00      	nop
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr

08000afc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b00:	f000 f8c6 	bl	8000c90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b04:	bf00      	nop
 8000b06:	bd80      	pop	{r7, pc}

08000b08 <_sbrk>:
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b086      	sub	sp, #24
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
 8000b10:	4a14      	ldr	r2, [pc, #80]	; (8000b64 <_sbrk+0x5c>)
 8000b12:	4b15      	ldr	r3, [pc, #84]	; (8000b68 <_sbrk+0x60>)
 8000b14:	1ad3      	subs	r3, r2, r3
 8000b16:	617b      	str	r3, [r7, #20]
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	613b      	str	r3, [r7, #16]
 8000b1c:	4b13      	ldr	r3, [pc, #76]	; (8000b6c <_sbrk+0x64>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d102      	bne.n	8000b2a <_sbrk+0x22>
 8000b24:	4b11      	ldr	r3, [pc, #68]	; (8000b6c <_sbrk+0x64>)
 8000b26:	4a12      	ldr	r2, [pc, #72]	; (8000b70 <_sbrk+0x68>)
 8000b28:	601a      	str	r2, [r3, #0]
 8000b2a:	4b10      	ldr	r3, [pc, #64]	; (8000b6c <_sbrk+0x64>)
 8000b2c:	681a      	ldr	r2, [r3, #0]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	4413      	add	r3, r2
 8000b32:	693a      	ldr	r2, [r7, #16]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	d207      	bcs.n	8000b48 <_sbrk+0x40>
 8000b38:	f002 f98e 	bl	8002e58 <__errno>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	220c      	movs	r2, #12
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	f04f 33ff 	mov.w	r3, #4294967295
 8000b46:	e009      	b.n	8000b5c <_sbrk+0x54>
 8000b48:	4b08      	ldr	r3, [pc, #32]	; (8000b6c <_sbrk+0x64>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	60fb      	str	r3, [r7, #12]
 8000b4e:	4b07      	ldr	r3, [pc, #28]	; (8000b6c <_sbrk+0x64>)
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	4413      	add	r3, r2
 8000b56:	4a05      	ldr	r2, [pc, #20]	; (8000b6c <_sbrk+0x64>)
 8000b58:	6013      	str	r3, [r2, #0]
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3718      	adds	r7, #24
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	20020000 	.word	0x20020000
 8000b68:	00000400 	.word	0x00000400
 8000b6c:	2000008c 	.word	0x2000008c
 8000b70:	20000140 	.word	0x20000140

08000b74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b78:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <SystemInit+0x20>)
 8000b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b7e:	4a05      	ldr	r2, [pc, #20]	; (8000b94 <SystemInit+0x20>)
 8000b80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	e000ed00 	.word	0xe000ed00

08000b98 <Reset_Handler>:
 8000b98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bd0 <LoopFillZerobss+0x12>
 8000b9c:	480d      	ldr	r0, [pc, #52]	; (8000bd4 <LoopFillZerobss+0x16>)
 8000b9e:	490e      	ldr	r1, [pc, #56]	; (8000bd8 <LoopFillZerobss+0x1a>)
 8000ba0:	4a0e      	ldr	r2, [pc, #56]	; (8000bdc <LoopFillZerobss+0x1e>)
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	e002      	b.n	8000bac <LoopCopyDataInit>

08000ba6 <CopyDataInit>:
 8000ba6:	58d4      	ldr	r4, [r2, r3]
 8000ba8:	50c4      	str	r4, [r0, r3]
 8000baa:	3304      	adds	r3, #4

08000bac <LoopCopyDataInit>:
 8000bac:	18c4      	adds	r4, r0, r3
 8000bae:	428c      	cmp	r4, r1
 8000bb0:	d3f9      	bcc.n	8000ba6 <CopyDataInit>
 8000bb2:	4a0b      	ldr	r2, [pc, #44]	; (8000be0 <LoopFillZerobss+0x22>)
 8000bb4:	4c0b      	ldr	r4, [pc, #44]	; (8000be4 <LoopFillZerobss+0x26>)
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	e001      	b.n	8000bbe <LoopFillZerobss>

08000bba <FillZerobss>:
 8000bba:	6013      	str	r3, [r2, #0]
 8000bbc:	3204      	adds	r2, #4

08000bbe <LoopFillZerobss>:
 8000bbe:	42a2      	cmp	r2, r4
 8000bc0:	d3fb      	bcc.n	8000bba <FillZerobss>
 8000bc2:	f7ff ffd7 	bl	8000b74 <SystemInit>
 8000bc6:	f002 f94d 	bl	8002e64 <__libc_init_array>
 8000bca:	f7ff fc81 	bl	80004d0 <main>
 8000bce:	4770      	bx	lr
 8000bd0:	20020000 	.word	0x20020000
 8000bd4:	20000000 	.word	0x20000000
 8000bd8:	20000070 	.word	0x20000070
 8000bdc:	0800377c 	.word	0x0800377c
 8000be0:	20000070 	.word	0x20000070
 8000be4:	2000013c 	.word	0x2000013c

08000be8 <ADC_IRQHandler>:
 8000be8:	e7fe      	b.n	8000be8 <ADC_IRQHandler>
	...

08000bec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bf0:	4b0e      	ldr	r3, [pc, #56]	; (8000c2c <HAL_Init+0x40>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a0d      	ldr	r2, [pc, #52]	; (8000c2c <HAL_Init+0x40>)
 8000bf6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bfc:	4b0b      	ldr	r3, [pc, #44]	; (8000c2c <HAL_Init+0x40>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a0a      	ldr	r2, [pc, #40]	; (8000c2c <HAL_Init+0x40>)
 8000c02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c08:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <HAL_Init+0x40>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a07      	ldr	r2, [pc, #28]	; (8000c2c <HAL_Init+0x40>)
 8000c0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c14:	2003      	movs	r0, #3
 8000c16:	f000 f931 	bl	8000e7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c1a:	200f      	movs	r0, #15
 8000c1c:	f000 f808 	bl	8000c30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c20:	f7ff fe80 	bl	8000924 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c24:	2300      	movs	r3, #0
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40023c00 	.word	0x40023c00

08000c30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c38:	4b12      	ldr	r3, [pc, #72]	; (8000c84 <HAL_InitTick+0x54>)
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	4b12      	ldr	r3, [pc, #72]	; (8000c88 <HAL_InitTick+0x58>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	4619      	mov	r1, r3
 8000c42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f000 f93b 	bl	8000eca <HAL_SYSTICK_Config>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	e00e      	b.n	8000c7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	2b0f      	cmp	r3, #15
 8000c62:	d80a      	bhi.n	8000c7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c64:	2200      	movs	r2, #0
 8000c66:	6879      	ldr	r1, [r7, #4]
 8000c68:	f04f 30ff 	mov.w	r0, #4294967295
 8000c6c:	f000 f911 	bl	8000e92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c70:	4a06      	ldr	r2, [pc, #24]	; (8000c8c <HAL_InitTick+0x5c>)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c76:	2300      	movs	r3, #0
 8000c78:	e000      	b.n	8000c7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c7a:	2301      	movs	r3, #1
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3708      	adds	r7, #8
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	20000000 	.word	0x20000000
 8000c88:	20000008 	.word	0x20000008
 8000c8c:	20000004 	.word	0x20000004

08000c90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c94:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <HAL_IncTick+0x20>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	461a      	mov	r2, r3
 8000c9a:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <HAL_IncTick+0x24>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	4a04      	ldr	r2, [pc, #16]	; (8000cb4 <HAL_IncTick+0x24>)
 8000ca2:	6013      	str	r3, [r2, #0]
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	20000008 	.word	0x20000008
 8000cb4:	20000128 	.word	0x20000128

08000cb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  return uwTick;
 8000cbc:	4b03      	ldr	r3, [pc, #12]	; (8000ccc <HAL_GetTick+0x14>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	20000128 	.word	0x20000128

08000cd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cd8:	f7ff ffee 	bl	8000cb8 <HAL_GetTick>
 8000cdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ce8:	d005      	beq.n	8000cf6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cea:	4b0a      	ldr	r3, [pc, #40]	; (8000d14 <HAL_Delay+0x44>)
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	461a      	mov	r2, r3
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000cf6:	bf00      	nop
 8000cf8:	f7ff ffde 	bl	8000cb8 <HAL_GetTick>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	68bb      	ldr	r3, [r7, #8]
 8000d00:	1ad3      	subs	r3, r2, r3
 8000d02:	68fa      	ldr	r2, [r7, #12]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d8f7      	bhi.n	8000cf8 <HAL_Delay+0x28>
  {
  }
}
 8000d08:	bf00      	nop
 8000d0a:	bf00      	nop
 8000d0c:	3710      	adds	r7, #16
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20000008 	.word	0x20000008

08000d18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b085      	sub	sp, #20
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	f003 0307 	and.w	r3, r3, #7
 8000d26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d28:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__NVIC_SetPriorityGrouping+0x44>)
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d2e:	68ba      	ldr	r2, [r7, #8]
 8000d30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d34:	4013      	ands	r3, r2
 8000d36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d4a:	4a04      	ldr	r2, [pc, #16]	; (8000d5c <__NVIC_SetPriorityGrouping+0x44>)
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	60d3      	str	r3, [r2, #12]
}
 8000d50:	bf00      	nop
 8000d52:	3714      	adds	r7, #20
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d64:	4b04      	ldr	r3, [pc, #16]	; (8000d78 <__NVIC_GetPriorityGrouping+0x18>)
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	0a1b      	lsrs	r3, r3, #8
 8000d6a:	f003 0307 	and.w	r3, r3, #7
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	6039      	str	r1, [r7, #0]
 8000d86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	db0a      	blt.n	8000da6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	b2da      	uxtb	r2, r3
 8000d94:	490c      	ldr	r1, [pc, #48]	; (8000dc8 <__NVIC_SetPriority+0x4c>)
 8000d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9a:	0112      	lsls	r2, r2, #4
 8000d9c:	b2d2      	uxtb	r2, r2
 8000d9e:	440b      	add	r3, r1
 8000da0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000da4:	e00a      	b.n	8000dbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	b2da      	uxtb	r2, r3
 8000daa:	4908      	ldr	r1, [pc, #32]	; (8000dcc <__NVIC_SetPriority+0x50>)
 8000dac:	79fb      	ldrb	r3, [r7, #7]
 8000dae:	f003 030f 	and.w	r3, r3, #15
 8000db2:	3b04      	subs	r3, #4
 8000db4:	0112      	lsls	r2, r2, #4
 8000db6:	b2d2      	uxtb	r2, r2
 8000db8:	440b      	add	r3, r1
 8000dba:	761a      	strb	r2, [r3, #24]
}
 8000dbc:	bf00      	nop
 8000dbe:	370c      	adds	r7, #12
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	e000e100 	.word	0xe000e100
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b089      	sub	sp, #36	; 0x24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	f003 0307 	and.w	r3, r3, #7
 8000de2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000de4:	69fb      	ldr	r3, [r7, #28]
 8000de6:	f1c3 0307 	rsb	r3, r3, #7
 8000dea:	2b04      	cmp	r3, #4
 8000dec:	bf28      	it	cs
 8000dee:	2304      	movcs	r3, #4
 8000df0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	3304      	adds	r3, #4
 8000df6:	2b06      	cmp	r3, #6
 8000df8:	d902      	bls.n	8000e00 <NVIC_EncodePriority+0x30>
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	3b03      	subs	r3, #3
 8000dfe:	e000      	b.n	8000e02 <NVIC_EncodePriority+0x32>
 8000e00:	2300      	movs	r3, #0
 8000e02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e04:	f04f 32ff 	mov.w	r2, #4294967295
 8000e08:	69bb      	ldr	r3, [r7, #24]
 8000e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0e:	43da      	mvns	r2, r3
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	401a      	ands	r2, r3
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e18:	f04f 31ff 	mov.w	r1, #4294967295
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e22:	43d9      	mvns	r1, r3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e28:	4313      	orrs	r3, r2
         );
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3724      	adds	r7, #36	; 0x24
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
	...

08000e38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	3b01      	subs	r3, #1
 8000e44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e48:	d301      	bcc.n	8000e4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e00f      	b.n	8000e6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e4e:	4a0a      	ldr	r2, [pc, #40]	; (8000e78 <SysTick_Config+0x40>)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	3b01      	subs	r3, #1
 8000e54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e56:	210f      	movs	r1, #15
 8000e58:	f04f 30ff 	mov.w	r0, #4294967295
 8000e5c:	f7ff ff8e 	bl	8000d7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e60:	4b05      	ldr	r3, [pc, #20]	; (8000e78 <SysTick_Config+0x40>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e66:	4b04      	ldr	r3, [pc, #16]	; (8000e78 <SysTick_Config+0x40>)
 8000e68:	2207      	movs	r2, #7
 8000e6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e6c:	2300      	movs	r3, #0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	e000e010 	.word	0xe000e010

08000e7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e84:	6878      	ldr	r0, [r7, #4]
 8000e86:	f7ff ff47 	bl	8000d18 <__NVIC_SetPriorityGrouping>
}
 8000e8a:	bf00      	nop
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b086      	sub	sp, #24
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	4603      	mov	r3, r0
 8000e9a:	60b9      	str	r1, [r7, #8]
 8000e9c:	607a      	str	r2, [r7, #4]
 8000e9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ea4:	f7ff ff5c 	bl	8000d60 <__NVIC_GetPriorityGrouping>
 8000ea8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eaa:	687a      	ldr	r2, [r7, #4]
 8000eac:	68b9      	ldr	r1, [r7, #8]
 8000eae:	6978      	ldr	r0, [r7, #20]
 8000eb0:	f7ff ff8e 	bl	8000dd0 <NVIC_EncodePriority>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eba:	4611      	mov	r1, r2
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff ff5d 	bl	8000d7c <__NVIC_SetPriority>
}
 8000ec2:	bf00      	nop
 8000ec4:	3718      	adds	r7, #24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b082      	sub	sp, #8
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f7ff ffb0 	bl	8000e38 <SysTick_Config>
 8000ed8:	4603      	mov	r3, r0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
	...

08000ee4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b089      	sub	sp, #36	; 0x24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000efa:	2300      	movs	r3, #0
 8000efc:	61fb      	str	r3, [r7, #28]
 8000efe:	e159      	b.n	80011b4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f00:	2201      	movs	r2, #1
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	697a      	ldr	r2, [r7, #20]
 8000f10:	4013      	ands	r3, r2
 8000f12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	f040 8148 	bne.w	80011ae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f003 0303 	and.w	r3, r3, #3
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d005      	beq.n	8000f36 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f32:	2b02      	cmp	r3, #2
 8000f34:	d130      	bne.n	8000f98 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	689b      	ldr	r3, [r3, #8]
 8000f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	2203      	movs	r2, #3
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	43db      	mvns	r3, r3
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	68da      	ldr	r2, [r3, #12]
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	69ba      	ldr	r2, [r7, #24]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	43db      	mvns	r3, r3
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	4013      	ands	r3, r2
 8000f7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	091b      	lsrs	r3, r3, #4
 8000f82:	f003 0201 	and.w	r2, r3, #1
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f003 0303 	and.w	r3, r3, #3
 8000fa0:	2b03      	cmp	r3, #3
 8000fa2:	d017      	beq.n	8000fd4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	2203      	movs	r2, #3
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	689a      	ldr	r2, [r3, #8]
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f003 0303 	and.w	r3, r3, #3
 8000fdc:	2b02      	cmp	r3, #2
 8000fde:	d123      	bne.n	8001028 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	08da      	lsrs	r2, r3, #3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	3208      	adds	r2, #8
 8000fe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	f003 0307 	and.w	r3, r3, #7
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	220f      	movs	r2, #15
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	4013      	ands	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	691a      	ldr	r2, [r3, #16]
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	f003 0307 	and.w	r3, r3, #7
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	4313      	orrs	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	08da      	lsrs	r2, r3, #3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	3208      	adds	r2, #8
 8001022:	69b9      	ldr	r1, [r7, #24]
 8001024:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	2203      	movs	r2, #3
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	43db      	mvns	r3, r3
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	4013      	ands	r3, r2
 800103e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f003 0203 	and.w	r2, r3, #3
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	005b      	lsls	r3, r3, #1
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	4313      	orrs	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001064:	2b00      	cmp	r3, #0
 8001066:	f000 80a2 	beq.w	80011ae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	4b57      	ldr	r3, [pc, #348]	; (80011cc <HAL_GPIO_Init+0x2e8>)
 8001070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001072:	4a56      	ldr	r2, [pc, #344]	; (80011cc <HAL_GPIO_Init+0x2e8>)
 8001074:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001078:	6453      	str	r3, [r2, #68]	; 0x44
 800107a:	4b54      	ldr	r3, [pc, #336]	; (80011cc <HAL_GPIO_Init+0x2e8>)
 800107c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001086:	4a52      	ldr	r2, [pc, #328]	; (80011d0 <HAL_GPIO_Init+0x2ec>)
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	089b      	lsrs	r3, r3, #2
 800108c:	3302      	adds	r3, #2
 800108e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001092:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	f003 0303 	and.w	r3, r3, #3
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	220f      	movs	r2, #15
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	43db      	mvns	r3, r3
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	4013      	ands	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a49      	ldr	r2, [pc, #292]	; (80011d4 <HAL_GPIO_Init+0x2f0>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d019      	beq.n	80010e6 <HAL_GPIO_Init+0x202>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a48      	ldr	r2, [pc, #288]	; (80011d8 <HAL_GPIO_Init+0x2f4>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d013      	beq.n	80010e2 <HAL_GPIO_Init+0x1fe>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a47      	ldr	r2, [pc, #284]	; (80011dc <HAL_GPIO_Init+0x2f8>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d00d      	beq.n	80010de <HAL_GPIO_Init+0x1fa>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a46      	ldr	r2, [pc, #280]	; (80011e0 <HAL_GPIO_Init+0x2fc>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d007      	beq.n	80010da <HAL_GPIO_Init+0x1f6>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a45      	ldr	r2, [pc, #276]	; (80011e4 <HAL_GPIO_Init+0x300>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d101      	bne.n	80010d6 <HAL_GPIO_Init+0x1f2>
 80010d2:	2304      	movs	r3, #4
 80010d4:	e008      	b.n	80010e8 <HAL_GPIO_Init+0x204>
 80010d6:	2307      	movs	r3, #7
 80010d8:	e006      	b.n	80010e8 <HAL_GPIO_Init+0x204>
 80010da:	2303      	movs	r3, #3
 80010dc:	e004      	b.n	80010e8 <HAL_GPIO_Init+0x204>
 80010de:	2302      	movs	r3, #2
 80010e0:	e002      	b.n	80010e8 <HAL_GPIO_Init+0x204>
 80010e2:	2301      	movs	r3, #1
 80010e4:	e000      	b.n	80010e8 <HAL_GPIO_Init+0x204>
 80010e6:	2300      	movs	r3, #0
 80010e8:	69fa      	ldr	r2, [r7, #28]
 80010ea:	f002 0203 	and.w	r2, r2, #3
 80010ee:	0092      	lsls	r2, r2, #2
 80010f0:	4093      	lsls	r3, r2
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010f8:	4935      	ldr	r1, [pc, #212]	; (80011d0 <HAL_GPIO_Init+0x2ec>)
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	089b      	lsrs	r3, r3, #2
 80010fe:	3302      	adds	r3, #2
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001106:	4b38      	ldr	r3, [pc, #224]	; (80011e8 <HAL_GPIO_Init+0x304>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	43db      	mvns	r3, r3
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	4013      	ands	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800111e:	2b00      	cmp	r3, #0
 8001120:	d003      	beq.n	800112a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	4313      	orrs	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800112a:	4a2f      	ldr	r2, [pc, #188]	; (80011e8 <HAL_GPIO_Init+0x304>)
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001130:	4b2d      	ldr	r3, [pc, #180]	; (80011e8 <HAL_GPIO_Init+0x304>)
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	43db      	mvns	r3, r3
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	4013      	ands	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001148:	2b00      	cmp	r3, #0
 800114a:	d003      	beq.n	8001154 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	4313      	orrs	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001154:	4a24      	ldr	r2, [pc, #144]	; (80011e8 <HAL_GPIO_Init+0x304>)
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800115a:	4b23      	ldr	r3, [pc, #140]	; (80011e8 <HAL_GPIO_Init+0x304>)
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	43db      	mvns	r3, r3
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	4013      	ands	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d003      	beq.n	800117e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	4313      	orrs	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800117e:	4a1a      	ldr	r2, [pc, #104]	; (80011e8 <HAL_GPIO_Init+0x304>)
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001184:	4b18      	ldr	r3, [pc, #96]	; (80011e8 <HAL_GPIO_Init+0x304>)
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	43db      	mvns	r3, r3
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4013      	ands	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800119c:	2b00      	cmp	r3, #0
 800119e:	d003      	beq.n	80011a8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011a8:	4a0f      	ldr	r2, [pc, #60]	; (80011e8 <HAL_GPIO_Init+0x304>)
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	3301      	adds	r3, #1
 80011b2:	61fb      	str	r3, [r7, #28]
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	2b0f      	cmp	r3, #15
 80011b8:	f67f aea2 	bls.w	8000f00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011bc:	bf00      	nop
 80011be:	bf00      	nop
 80011c0:	3724      	adds	r7, #36	; 0x24
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	40023800 	.word	0x40023800
 80011d0:	40013800 	.word	0x40013800
 80011d4:	40020000 	.word	0x40020000
 80011d8:	40020400 	.word	0x40020400
 80011dc:	40020800 	.word	0x40020800
 80011e0:	40020c00 	.word	0x40020c00
 80011e4:	40021000 	.word	0x40021000
 80011e8:	40013c00 	.word	0x40013c00

080011ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	460b      	mov	r3, r1
 80011f6:	807b      	strh	r3, [r7, #2]
 80011f8:	4613      	mov	r3, r2
 80011fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011fc:	787b      	ldrb	r3, [r7, #1]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d003      	beq.n	800120a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001202:	887a      	ldrh	r2, [r7, #2]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001208:	e003      	b.n	8001212 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800120a:	887b      	ldrh	r3, [r7, #2]
 800120c:	041a      	lsls	r2, r3, #16
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	619a      	str	r2, [r3, #24]
}
 8001212:	bf00      	nop
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
	...

08001220 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d101      	bne.n	8001232 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e264      	b.n	80016fc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f003 0301 	and.w	r3, r3, #1
 800123a:	2b00      	cmp	r3, #0
 800123c:	d075      	beq.n	800132a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800123e:	4ba3      	ldr	r3, [pc, #652]	; (80014cc <HAL_RCC_OscConfig+0x2ac>)
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	f003 030c 	and.w	r3, r3, #12
 8001246:	2b04      	cmp	r3, #4
 8001248:	d00c      	beq.n	8001264 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800124a:	4ba0      	ldr	r3, [pc, #640]	; (80014cc <HAL_RCC_OscConfig+0x2ac>)
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001252:	2b08      	cmp	r3, #8
 8001254:	d112      	bne.n	800127c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001256:	4b9d      	ldr	r3, [pc, #628]	; (80014cc <HAL_RCC_OscConfig+0x2ac>)
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800125e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001262:	d10b      	bne.n	800127c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001264:	4b99      	ldr	r3, [pc, #612]	; (80014cc <HAL_RCC_OscConfig+0x2ac>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800126c:	2b00      	cmp	r3, #0
 800126e:	d05b      	beq.n	8001328 <HAL_RCC_OscConfig+0x108>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d157      	bne.n	8001328 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001278:	2301      	movs	r3, #1
 800127a:	e23f      	b.n	80016fc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001284:	d106      	bne.n	8001294 <HAL_RCC_OscConfig+0x74>
 8001286:	4b91      	ldr	r3, [pc, #580]	; (80014cc <HAL_RCC_OscConfig+0x2ac>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a90      	ldr	r2, [pc, #576]	; (80014cc <HAL_RCC_OscConfig+0x2ac>)
 800128c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001290:	6013      	str	r3, [r2, #0]
 8001292:	e01d      	b.n	80012d0 <HAL_RCC_OscConfig+0xb0>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800129c:	d10c      	bne.n	80012b8 <HAL_RCC_OscConfig+0x98>
 800129e:	4b8b      	ldr	r3, [pc, #556]	; (80014cc <HAL_RCC_OscConfig+0x2ac>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a8a      	ldr	r2, [pc, #552]	; (80014cc <HAL_RCC_OscConfig+0x2ac>)
 80012a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012a8:	6013      	str	r3, [r2, #0]
 80012aa:	4b88      	ldr	r3, [pc, #544]	; (80014cc <HAL_RCC_OscConfig+0x2ac>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a87      	ldr	r2, [pc, #540]	; (80014cc <HAL_RCC_OscConfig+0x2ac>)
 80012b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012b4:	6013      	str	r3, [r2, #0]
 80012b6:	e00b      	b.n	80012d0 <HAL_RCC_OscConfig+0xb0>
 80012b8:	4b84      	ldr	r3, [pc, #528]	; (80014cc <HAL_RCC_OscConfig+0x2ac>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a83      	ldr	r2, [pc, #524]	; (80014cc <HAL_RCC_OscConfig+0x2ac>)
 80012be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012c2:	6013      	str	r3, [r2, #0]
 80012c4:	4b81      	ldr	r3, [pc, #516]	; (80014cc <HAL_RCC_OscConfig+0x2ac>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a80      	ldr	r2, [pc, #512]	; (80014cc <HAL_RCC_OscConfig+0x2ac>)
 80012ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d013      	beq.n	8001300 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d8:	f7ff fcee 	bl	8000cb8 <HAL_GetTick>
 80012dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012de:	e008      	b.n	80012f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012e0:	f7ff fcea 	bl	8000cb8 <HAL_GetTick>
 80012e4:	4602      	mov	r2, r0
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	2b64      	cmp	r3, #100	; 0x64
 80012ec:	d901      	bls.n	80012f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012ee:	2303      	movs	r3, #3
 80012f0:	e204      	b.n	80016fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012f2:	4b76      	ldr	r3, [pc, #472]	; (80014cc <HAL_RCC_OscConfig+0x2ac>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d0f0      	beq.n	80012e0 <HAL_RCC_OscConfig+0xc0>
 80012fe:	e014      	b.n	800132a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001300:	f7ff fcda 	bl	8000cb8 <HAL_GetTick>
 8001304:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001306:	e008      	b.n	800131a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001308:	f7ff fcd6 	bl	8000cb8 <HAL_GetTick>
 800130c:	4602      	mov	r2, r0
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	2b64      	cmp	r3, #100	; 0x64
 8001314:	d901      	bls.n	800131a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001316:	2303      	movs	r3, #3
 8001318:	e1f0      	b.n	80016fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800131a:	4b6c      	ldr	r3, [pc, #432]	; (80014cc <HAL_RCC_OscConfig+0x2ac>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d1f0      	bne.n	8001308 <HAL_RCC_OscConfig+0xe8>
 8001326:	e000      	b.n	800132a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001328:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	2b00      	cmp	r3, #0
 8001334:	d063      	beq.n	80013fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001336:	4b65      	ldr	r3, [pc, #404]	; (80014cc <HAL_RCC_OscConfig+0x2ac>)
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	f003 030c 	and.w	r3, r3, #12
 800133e:	2b00      	cmp	r3, #0
 8001340:	d00b      	beq.n	800135a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001342:	4b62      	ldr	r3, [pc, #392]	; (80014cc <HAL_RCC_OscConfig+0x2ac>)
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800134a:	2b08      	cmp	r3, #8
 800134c:	d11c      	bne.n	8001388 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800134e:	4b5f      	ldr	r3, [pc, #380]	; (80014cc <HAL_RCC_OscConfig+0x2ac>)
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d116      	bne.n	8001388 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800135a:	4b5c      	ldr	r3, [pc, #368]	; (80014cc <HAL_RCC_OscConfig+0x2ac>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	2b00      	cmp	r3, #0
 8001364:	d005      	beq.n	8001372 <HAL_RCC_OscConfig+0x152>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	68db      	ldr	r3, [r3, #12]
 800136a:	2b01      	cmp	r3, #1
 800136c:	d001      	beq.n	8001372 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e1c4      	b.n	80016fc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001372:	4b56      	ldr	r3, [pc, #344]	; (80014cc <HAL_RCC_OscConfig+0x2ac>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	691b      	ldr	r3, [r3, #16]
 800137e:	00db      	lsls	r3, r3, #3
 8001380:	4952      	ldr	r1, [pc, #328]	; (80014cc <HAL_RCC_OscConfig+0x2ac>)
 8001382:	4313      	orrs	r3, r2
 8001384:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001386:	e03a      	b.n	80013fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d020      	beq.n	80013d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001390:	4b4f      	ldr	r3, [pc, #316]	; (80014d0 <HAL_RCC_OscConfig+0x2b0>)
 8001392:	2201      	movs	r2, #1
 8001394:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001396:	f7ff fc8f 	bl	8000cb8 <HAL_GetTick>
 800139a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800139c:	e008      	b.n	80013b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800139e:	f7ff fc8b 	bl	8000cb8 <HAL_GetTick>
 80013a2:	4602      	mov	r2, r0
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d901      	bls.n	80013b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013ac:	2303      	movs	r3, #3
 80013ae:	e1a5      	b.n	80016fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013b0:	4b46      	ldr	r3, [pc, #280]	; (80014cc <HAL_RCC_OscConfig+0x2ac>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f003 0302 	and.w	r3, r3, #2
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d0f0      	beq.n	800139e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013bc:	4b43      	ldr	r3, [pc, #268]	; (80014cc <HAL_RCC_OscConfig+0x2ac>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	691b      	ldr	r3, [r3, #16]
 80013c8:	00db      	lsls	r3, r3, #3
 80013ca:	4940      	ldr	r1, [pc, #256]	; (80014cc <HAL_RCC_OscConfig+0x2ac>)
 80013cc:	4313      	orrs	r3, r2
 80013ce:	600b      	str	r3, [r1, #0]
 80013d0:	e015      	b.n	80013fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013d2:	4b3f      	ldr	r3, [pc, #252]	; (80014d0 <HAL_RCC_OscConfig+0x2b0>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013d8:	f7ff fc6e 	bl	8000cb8 <HAL_GetTick>
 80013dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013de:	e008      	b.n	80013f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013e0:	f7ff fc6a 	bl	8000cb8 <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d901      	bls.n	80013f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e184      	b.n	80016fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013f2:	4b36      	ldr	r3, [pc, #216]	; (80014cc <HAL_RCC_OscConfig+0x2ac>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d1f0      	bne.n	80013e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0308 	and.w	r3, r3, #8
 8001406:	2b00      	cmp	r3, #0
 8001408:	d030      	beq.n	800146c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	695b      	ldr	r3, [r3, #20]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d016      	beq.n	8001440 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001412:	4b30      	ldr	r3, [pc, #192]	; (80014d4 <HAL_RCC_OscConfig+0x2b4>)
 8001414:	2201      	movs	r2, #1
 8001416:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001418:	f7ff fc4e 	bl	8000cb8 <HAL_GetTick>
 800141c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800141e:	e008      	b.n	8001432 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001420:	f7ff fc4a 	bl	8000cb8 <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	2b02      	cmp	r3, #2
 800142c:	d901      	bls.n	8001432 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800142e:	2303      	movs	r3, #3
 8001430:	e164      	b.n	80016fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001432:	4b26      	ldr	r3, [pc, #152]	; (80014cc <HAL_RCC_OscConfig+0x2ac>)
 8001434:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	2b00      	cmp	r3, #0
 800143c:	d0f0      	beq.n	8001420 <HAL_RCC_OscConfig+0x200>
 800143e:	e015      	b.n	800146c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001440:	4b24      	ldr	r3, [pc, #144]	; (80014d4 <HAL_RCC_OscConfig+0x2b4>)
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001446:	f7ff fc37 	bl	8000cb8 <HAL_GetTick>
 800144a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800144c:	e008      	b.n	8001460 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800144e:	f7ff fc33 	bl	8000cb8 <HAL_GetTick>
 8001452:	4602      	mov	r2, r0
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	2b02      	cmp	r3, #2
 800145a:	d901      	bls.n	8001460 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800145c:	2303      	movs	r3, #3
 800145e:	e14d      	b.n	80016fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001460:	4b1a      	ldr	r3, [pc, #104]	; (80014cc <HAL_RCC_OscConfig+0x2ac>)
 8001462:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001464:	f003 0302 	and.w	r3, r3, #2
 8001468:	2b00      	cmp	r3, #0
 800146a:	d1f0      	bne.n	800144e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 0304 	and.w	r3, r3, #4
 8001474:	2b00      	cmp	r3, #0
 8001476:	f000 80a0 	beq.w	80015ba <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800147a:	2300      	movs	r3, #0
 800147c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800147e:	4b13      	ldr	r3, [pc, #76]	; (80014cc <HAL_RCC_OscConfig+0x2ac>)
 8001480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d10f      	bne.n	80014aa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	60bb      	str	r3, [r7, #8]
 800148e:	4b0f      	ldr	r3, [pc, #60]	; (80014cc <HAL_RCC_OscConfig+0x2ac>)
 8001490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001492:	4a0e      	ldr	r2, [pc, #56]	; (80014cc <HAL_RCC_OscConfig+0x2ac>)
 8001494:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001498:	6413      	str	r3, [r2, #64]	; 0x40
 800149a:	4b0c      	ldr	r3, [pc, #48]	; (80014cc <HAL_RCC_OscConfig+0x2ac>)
 800149c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a2:	60bb      	str	r3, [r7, #8]
 80014a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014a6:	2301      	movs	r3, #1
 80014a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014aa:	4b0b      	ldr	r3, [pc, #44]	; (80014d8 <HAL_RCC_OscConfig+0x2b8>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d121      	bne.n	80014fa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014b6:	4b08      	ldr	r3, [pc, #32]	; (80014d8 <HAL_RCC_OscConfig+0x2b8>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a07      	ldr	r2, [pc, #28]	; (80014d8 <HAL_RCC_OscConfig+0x2b8>)
 80014bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014c2:	f7ff fbf9 	bl	8000cb8 <HAL_GetTick>
 80014c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014c8:	e011      	b.n	80014ee <HAL_RCC_OscConfig+0x2ce>
 80014ca:	bf00      	nop
 80014cc:	40023800 	.word	0x40023800
 80014d0:	42470000 	.word	0x42470000
 80014d4:	42470e80 	.word	0x42470e80
 80014d8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014dc:	f7ff fbec 	bl	8000cb8 <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d901      	bls.n	80014ee <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e106      	b.n	80016fc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ee:	4b85      	ldr	r3, [pc, #532]	; (8001704 <HAL_RCC_OscConfig+0x4e4>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d0f0      	beq.n	80014dc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d106      	bne.n	8001510 <HAL_RCC_OscConfig+0x2f0>
 8001502:	4b81      	ldr	r3, [pc, #516]	; (8001708 <HAL_RCC_OscConfig+0x4e8>)
 8001504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001506:	4a80      	ldr	r2, [pc, #512]	; (8001708 <HAL_RCC_OscConfig+0x4e8>)
 8001508:	f043 0301 	orr.w	r3, r3, #1
 800150c:	6713      	str	r3, [r2, #112]	; 0x70
 800150e:	e01c      	b.n	800154a <HAL_RCC_OscConfig+0x32a>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	2b05      	cmp	r3, #5
 8001516:	d10c      	bne.n	8001532 <HAL_RCC_OscConfig+0x312>
 8001518:	4b7b      	ldr	r3, [pc, #492]	; (8001708 <HAL_RCC_OscConfig+0x4e8>)
 800151a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800151c:	4a7a      	ldr	r2, [pc, #488]	; (8001708 <HAL_RCC_OscConfig+0x4e8>)
 800151e:	f043 0304 	orr.w	r3, r3, #4
 8001522:	6713      	str	r3, [r2, #112]	; 0x70
 8001524:	4b78      	ldr	r3, [pc, #480]	; (8001708 <HAL_RCC_OscConfig+0x4e8>)
 8001526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001528:	4a77      	ldr	r2, [pc, #476]	; (8001708 <HAL_RCC_OscConfig+0x4e8>)
 800152a:	f043 0301 	orr.w	r3, r3, #1
 800152e:	6713      	str	r3, [r2, #112]	; 0x70
 8001530:	e00b      	b.n	800154a <HAL_RCC_OscConfig+0x32a>
 8001532:	4b75      	ldr	r3, [pc, #468]	; (8001708 <HAL_RCC_OscConfig+0x4e8>)
 8001534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001536:	4a74      	ldr	r2, [pc, #464]	; (8001708 <HAL_RCC_OscConfig+0x4e8>)
 8001538:	f023 0301 	bic.w	r3, r3, #1
 800153c:	6713      	str	r3, [r2, #112]	; 0x70
 800153e:	4b72      	ldr	r3, [pc, #456]	; (8001708 <HAL_RCC_OscConfig+0x4e8>)
 8001540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001542:	4a71      	ldr	r2, [pc, #452]	; (8001708 <HAL_RCC_OscConfig+0x4e8>)
 8001544:	f023 0304 	bic.w	r3, r3, #4
 8001548:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d015      	beq.n	800157e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001552:	f7ff fbb1 	bl	8000cb8 <HAL_GetTick>
 8001556:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001558:	e00a      	b.n	8001570 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800155a:	f7ff fbad 	bl	8000cb8 <HAL_GetTick>
 800155e:	4602      	mov	r2, r0
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	f241 3288 	movw	r2, #5000	; 0x1388
 8001568:	4293      	cmp	r3, r2
 800156a:	d901      	bls.n	8001570 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800156c:	2303      	movs	r3, #3
 800156e:	e0c5      	b.n	80016fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001570:	4b65      	ldr	r3, [pc, #404]	; (8001708 <HAL_RCC_OscConfig+0x4e8>)
 8001572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001574:	f003 0302 	and.w	r3, r3, #2
 8001578:	2b00      	cmp	r3, #0
 800157a:	d0ee      	beq.n	800155a <HAL_RCC_OscConfig+0x33a>
 800157c:	e014      	b.n	80015a8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800157e:	f7ff fb9b 	bl	8000cb8 <HAL_GetTick>
 8001582:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001584:	e00a      	b.n	800159c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001586:	f7ff fb97 	bl	8000cb8 <HAL_GetTick>
 800158a:	4602      	mov	r2, r0
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	f241 3288 	movw	r2, #5000	; 0x1388
 8001594:	4293      	cmp	r3, r2
 8001596:	d901      	bls.n	800159c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e0af      	b.n	80016fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800159c:	4b5a      	ldr	r3, [pc, #360]	; (8001708 <HAL_RCC_OscConfig+0x4e8>)
 800159e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a0:	f003 0302 	and.w	r3, r3, #2
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d1ee      	bne.n	8001586 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015a8:	7dfb      	ldrb	r3, [r7, #23]
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d105      	bne.n	80015ba <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015ae:	4b56      	ldr	r3, [pc, #344]	; (8001708 <HAL_RCC_OscConfig+0x4e8>)
 80015b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b2:	4a55      	ldr	r2, [pc, #340]	; (8001708 <HAL_RCC_OscConfig+0x4e8>)
 80015b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015b8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	699b      	ldr	r3, [r3, #24]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	f000 809b 	beq.w	80016fa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015c4:	4b50      	ldr	r3, [pc, #320]	; (8001708 <HAL_RCC_OscConfig+0x4e8>)
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	f003 030c 	and.w	r3, r3, #12
 80015cc:	2b08      	cmp	r3, #8
 80015ce:	d05c      	beq.n	800168a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	699b      	ldr	r3, [r3, #24]
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d141      	bne.n	800165c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015d8:	4b4c      	ldr	r3, [pc, #304]	; (800170c <HAL_RCC_OscConfig+0x4ec>)
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015de:	f7ff fb6b 	bl	8000cb8 <HAL_GetTick>
 80015e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015e4:	e008      	b.n	80015f8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015e6:	f7ff fb67 	bl	8000cb8 <HAL_GetTick>
 80015ea:	4602      	mov	r2, r0
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d901      	bls.n	80015f8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80015f4:	2303      	movs	r3, #3
 80015f6:	e081      	b.n	80016fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015f8:	4b43      	ldr	r3, [pc, #268]	; (8001708 <HAL_RCC_OscConfig+0x4e8>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001600:	2b00      	cmp	r3, #0
 8001602:	d1f0      	bne.n	80015e6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	69da      	ldr	r2, [r3, #28]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6a1b      	ldr	r3, [r3, #32]
 800160c:	431a      	orrs	r2, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001612:	019b      	lsls	r3, r3, #6
 8001614:	431a      	orrs	r2, r3
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800161a:	085b      	lsrs	r3, r3, #1
 800161c:	3b01      	subs	r3, #1
 800161e:	041b      	lsls	r3, r3, #16
 8001620:	431a      	orrs	r2, r3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001626:	061b      	lsls	r3, r3, #24
 8001628:	4937      	ldr	r1, [pc, #220]	; (8001708 <HAL_RCC_OscConfig+0x4e8>)
 800162a:	4313      	orrs	r3, r2
 800162c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800162e:	4b37      	ldr	r3, [pc, #220]	; (800170c <HAL_RCC_OscConfig+0x4ec>)
 8001630:	2201      	movs	r2, #1
 8001632:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001634:	f7ff fb40 	bl	8000cb8 <HAL_GetTick>
 8001638:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800163a:	e008      	b.n	800164e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800163c:	f7ff fb3c 	bl	8000cb8 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b02      	cmp	r3, #2
 8001648:	d901      	bls.n	800164e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e056      	b.n	80016fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800164e:	4b2e      	ldr	r3, [pc, #184]	; (8001708 <HAL_RCC_OscConfig+0x4e8>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d0f0      	beq.n	800163c <HAL_RCC_OscConfig+0x41c>
 800165a:	e04e      	b.n	80016fa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800165c:	4b2b      	ldr	r3, [pc, #172]	; (800170c <HAL_RCC_OscConfig+0x4ec>)
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001662:	f7ff fb29 	bl	8000cb8 <HAL_GetTick>
 8001666:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001668:	e008      	b.n	800167c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800166a:	f7ff fb25 	bl	8000cb8 <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	2b02      	cmp	r3, #2
 8001676:	d901      	bls.n	800167c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	e03f      	b.n	80016fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800167c:	4b22      	ldr	r3, [pc, #136]	; (8001708 <HAL_RCC_OscConfig+0x4e8>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001684:	2b00      	cmp	r3, #0
 8001686:	d1f0      	bne.n	800166a <HAL_RCC_OscConfig+0x44a>
 8001688:	e037      	b.n	80016fa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	699b      	ldr	r3, [r3, #24]
 800168e:	2b01      	cmp	r3, #1
 8001690:	d101      	bne.n	8001696 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e032      	b.n	80016fc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001696:	4b1c      	ldr	r3, [pc, #112]	; (8001708 <HAL_RCC_OscConfig+0x4e8>)
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d028      	beq.n	80016f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d121      	bne.n	80016f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016bc:	429a      	cmp	r2, r3
 80016be:	d11a      	bne.n	80016f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016c0:	68fa      	ldr	r2, [r7, #12]
 80016c2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016c6:	4013      	ands	r3, r2
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016cc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d111      	bne.n	80016f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016dc:	085b      	lsrs	r3, r3, #1
 80016de:	3b01      	subs	r3, #1
 80016e0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d107      	bne.n	80016f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d001      	beq.n	80016fa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e000      	b.n	80016fc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80016fa:	2300      	movs	r3, #0
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3718      	adds	r7, #24
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40007000 	.word	0x40007000
 8001708:	40023800 	.word	0x40023800
 800170c:	42470060 	.word	0x42470060

08001710 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d101      	bne.n	8001724 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e0cc      	b.n	80018be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001724:	4b68      	ldr	r3, [pc, #416]	; (80018c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0307 	and.w	r3, r3, #7
 800172c:	683a      	ldr	r2, [r7, #0]
 800172e:	429a      	cmp	r2, r3
 8001730:	d90c      	bls.n	800174c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001732:	4b65      	ldr	r3, [pc, #404]	; (80018c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001734:	683a      	ldr	r2, [r7, #0]
 8001736:	b2d2      	uxtb	r2, r2
 8001738:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800173a:	4b63      	ldr	r3, [pc, #396]	; (80018c8 <HAL_RCC_ClockConfig+0x1b8>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 0307 	and.w	r3, r3, #7
 8001742:	683a      	ldr	r2, [r7, #0]
 8001744:	429a      	cmp	r2, r3
 8001746:	d001      	beq.n	800174c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e0b8      	b.n	80018be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0302 	and.w	r3, r3, #2
 8001754:	2b00      	cmp	r3, #0
 8001756:	d020      	beq.n	800179a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0304 	and.w	r3, r3, #4
 8001760:	2b00      	cmp	r3, #0
 8001762:	d005      	beq.n	8001770 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001764:	4b59      	ldr	r3, [pc, #356]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	4a58      	ldr	r2, [pc, #352]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 800176a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800176e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0308 	and.w	r3, r3, #8
 8001778:	2b00      	cmp	r3, #0
 800177a:	d005      	beq.n	8001788 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800177c:	4b53      	ldr	r3, [pc, #332]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	4a52      	ldr	r2, [pc, #328]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 8001782:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001786:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001788:	4b50      	ldr	r3, [pc, #320]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	494d      	ldr	r1, [pc, #308]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 8001796:	4313      	orrs	r3, r2
 8001798:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d044      	beq.n	8001830 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d107      	bne.n	80017be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ae:	4b47      	ldr	r3, [pc, #284]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d119      	bne.n	80017ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e07f      	b.n	80018be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d003      	beq.n	80017ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017ca:	2b03      	cmp	r3, #3
 80017cc:	d107      	bne.n	80017de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ce:	4b3f      	ldr	r3, [pc, #252]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d109      	bne.n	80017ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e06f      	b.n	80018be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017de:	4b3b      	ldr	r3, [pc, #236]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d101      	bne.n	80017ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e067      	b.n	80018be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017ee:	4b37      	ldr	r3, [pc, #220]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	f023 0203 	bic.w	r2, r3, #3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	4934      	ldr	r1, [pc, #208]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 80017fc:	4313      	orrs	r3, r2
 80017fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001800:	f7ff fa5a 	bl	8000cb8 <HAL_GetTick>
 8001804:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001806:	e00a      	b.n	800181e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001808:	f7ff fa56 	bl	8000cb8 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	f241 3288 	movw	r2, #5000	; 0x1388
 8001816:	4293      	cmp	r3, r2
 8001818:	d901      	bls.n	800181e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e04f      	b.n	80018be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800181e:	4b2b      	ldr	r3, [pc, #172]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f003 020c 	and.w	r2, r3, #12
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	429a      	cmp	r2, r3
 800182e:	d1eb      	bne.n	8001808 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001830:	4b25      	ldr	r3, [pc, #148]	; (80018c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 0307 	and.w	r3, r3, #7
 8001838:	683a      	ldr	r2, [r7, #0]
 800183a:	429a      	cmp	r2, r3
 800183c:	d20c      	bcs.n	8001858 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800183e:	4b22      	ldr	r3, [pc, #136]	; (80018c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001840:	683a      	ldr	r2, [r7, #0]
 8001842:	b2d2      	uxtb	r2, r2
 8001844:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001846:	4b20      	ldr	r3, [pc, #128]	; (80018c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0307 	and.w	r3, r3, #7
 800184e:	683a      	ldr	r2, [r7, #0]
 8001850:	429a      	cmp	r2, r3
 8001852:	d001      	beq.n	8001858 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e032      	b.n	80018be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0304 	and.w	r3, r3, #4
 8001860:	2b00      	cmp	r3, #0
 8001862:	d008      	beq.n	8001876 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001864:	4b19      	ldr	r3, [pc, #100]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	4916      	ldr	r1, [pc, #88]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 8001872:	4313      	orrs	r3, r2
 8001874:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0308 	and.w	r3, r3, #8
 800187e:	2b00      	cmp	r3, #0
 8001880:	d009      	beq.n	8001896 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001882:	4b12      	ldr	r3, [pc, #72]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	691b      	ldr	r3, [r3, #16]
 800188e:	00db      	lsls	r3, r3, #3
 8001890:	490e      	ldr	r1, [pc, #56]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 8001892:	4313      	orrs	r3, r2
 8001894:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001896:	f000 f821 	bl	80018dc <HAL_RCC_GetSysClockFreq>
 800189a:	4602      	mov	r2, r0
 800189c:	4b0b      	ldr	r3, [pc, #44]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	091b      	lsrs	r3, r3, #4
 80018a2:	f003 030f 	and.w	r3, r3, #15
 80018a6:	490a      	ldr	r1, [pc, #40]	; (80018d0 <HAL_RCC_ClockConfig+0x1c0>)
 80018a8:	5ccb      	ldrb	r3, [r1, r3]
 80018aa:	fa22 f303 	lsr.w	r3, r2, r3
 80018ae:	4a09      	ldr	r2, [pc, #36]	; (80018d4 <HAL_RCC_ClockConfig+0x1c4>)
 80018b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018b2:	4b09      	ldr	r3, [pc, #36]	; (80018d8 <HAL_RCC_ClockConfig+0x1c8>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff f9ba 	bl	8000c30 <HAL_InitTick>

  return HAL_OK;
 80018bc:	2300      	movs	r3, #0
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3710      	adds	r7, #16
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	40023c00 	.word	0x40023c00
 80018cc:	40023800 	.word	0x40023800
 80018d0:	080036f0 	.word	0x080036f0
 80018d4:	20000000 	.word	0x20000000
 80018d8:	20000004 	.word	0x20000004

080018dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018dc:	b5b0      	push	{r4, r5, r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80018e2:	2100      	movs	r1, #0
 80018e4:	6079      	str	r1, [r7, #4]
 80018e6:	2100      	movs	r1, #0
 80018e8:	60f9      	str	r1, [r7, #12]
 80018ea:	2100      	movs	r1, #0
 80018ec:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80018ee:	2100      	movs	r1, #0
 80018f0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018f2:	4952      	ldr	r1, [pc, #328]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x160>)
 80018f4:	6889      	ldr	r1, [r1, #8]
 80018f6:	f001 010c 	and.w	r1, r1, #12
 80018fa:	2908      	cmp	r1, #8
 80018fc:	d00d      	beq.n	800191a <HAL_RCC_GetSysClockFreq+0x3e>
 80018fe:	2908      	cmp	r1, #8
 8001900:	f200 8094 	bhi.w	8001a2c <HAL_RCC_GetSysClockFreq+0x150>
 8001904:	2900      	cmp	r1, #0
 8001906:	d002      	beq.n	800190e <HAL_RCC_GetSysClockFreq+0x32>
 8001908:	2904      	cmp	r1, #4
 800190a:	d003      	beq.n	8001914 <HAL_RCC_GetSysClockFreq+0x38>
 800190c:	e08e      	b.n	8001a2c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800190e:	4b4c      	ldr	r3, [pc, #304]	; (8001a40 <HAL_RCC_GetSysClockFreq+0x164>)
 8001910:	60bb      	str	r3, [r7, #8]
       break;
 8001912:	e08e      	b.n	8001a32 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001914:	4b4b      	ldr	r3, [pc, #300]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x168>)
 8001916:	60bb      	str	r3, [r7, #8]
      break;
 8001918:	e08b      	b.n	8001a32 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800191a:	4948      	ldr	r1, [pc, #288]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x160>)
 800191c:	6849      	ldr	r1, [r1, #4]
 800191e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001922:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001924:	4945      	ldr	r1, [pc, #276]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x160>)
 8001926:	6849      	ldr	r1, [r1, #4]
 8001928:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800192c:	2900      	cmp	r1, #0
 800192e:	d024      	beq.n	800197a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001930:	4942      	ldr	r1, [pc, #264]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x160>)
 8001932:	6849      	ldr	r1, [r1, #4]
 8001934:	0989      	lsrs	r1, r1, #6
 8001936:	4608      	mov	r0, r1
 8001938:	f04f 0100 	mov.w	r1, #0
 800193c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001940:	f04f 0500 	mov.w	r5, #0
 8001944:	ea00 0204 	and.w	r2, r0, r4
 8001948:	ea01 0305 	and.w	r3, r1, r5
 800194c:	493d      	ldr	r1, [pc, #244]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x168>)
 800194e:	fb01 f003 	mul.w	r0, r1, r3
 8001952:	2100      	movs	r1, #0
 8001954:	fb01 f102 	mul.w	r1, r1, r2
 8001958:	1844      	adds	r4, r0, r1
 800195a:	493a      	ldr	r1, [pc, #232]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x168>)
 800195c:	fba2 0101 	umull	r0, r1, r2, r1
 8001960:	1863      	adds	r3, r4, r1
 8001962:	4619      	mov	r1, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	461a      	mov	r2, r3
 8001968:	f04f 0300 	mov.w	r3, #0
 800196c:	f7fe fc34 	bl	80001d8 <__aeabi_uldivmod>
 8001970:	4602      	mov	r2, r0
 8001972:	460b      	mov	r3, r1
 8001974:	4613      	mov	r3, r2
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	e04a      	b.n	8001a10 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800197a:	4b30      	ldr	r3, [pc, #192]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x160>)
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	099b      	lsrs	r3, r3, #6
 8001980:	461a      	mov	r2, r3
 8001982:	f04f 0300 	mov.w	r3, #0
 8001986:	f240 10ff 	movw	r0, #511	; 0x1ff
 800198a:	f04f 0100 	mov.w	r1, #0
 800198e:	ea02 0400 	and.w	r4, r2, r0
 8001992:	ea03 0501 	and.w	r5, r3, r1
 8001996:	4620      	mov	r0, r4
 8001998:	4629      	mov	r1, r5
 800199a:	f04f 0200 	mov.w	r2, #0
 800199e:	f04f 0300 	mov.w	r3, #0
 80019a2:	014b      	lsls	r3, r1, #5
 80019a4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80019a8:	0142      	lsls	r2, r0, #5
 80019aa:	4610      	mov	r0, r2
 80019ac:	4619      	mov	r1, r3
 80019ae:	1b00      	subs	r0, r0, r4
 80019b0:	eb61 0105 	sbc.w	r1, r1, r5
 80019b4:	f04f 0200 	mov.w	r2, #0
 80019b8:	f04f 0300 	mov.w	r3, #0
 80019bc:	018b      	lsls	r3, r1, #6
 80019be:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80019c2:	0182      	lsls	r2, r0, #6
 80019c4:	1a12      	subs	r2, r2, r0
 80019c6:	eb63 0301 	sbc.w	r3, r3, r1
 80019ca:	f04f 0000 	mov.w	r0, #0
 80019ce:	f04f 0100 	mov.w	r1, #0
 80019d2:	00d9      	lsls	r1, r3, #3
 80019d4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80019d8:	00d0      	lsls	r0, r2, #3
 80019da:	4602      	mov	r2, r0
 80019dc:	460b      	mov	r3, r1
 80019de:	1912      	adds	r2, r2, r4
 80019e0:	eb45 0303 	adc.w	r3, r5, r3
 80019e4:	f04f 0000 	mov.w	r0, #0
 80019e8:	f04f 0100 	mov.w	r1, #0
 80019ec:	0299      	lsls	r1, r3, #10
 80019ee:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80019f2:	0290      	lsls	r0, r2, #10
 80019f4:	4602      	mov	r2, r0
 80019f6:	460b      	mov	r3, r1
 80019f8:	4610      	mov	r0, r2
 80019fa:	4619      	mov	r1, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	461a      	mov	r2, r3
 8001a00:	f04f 0300 	mov.w	r3, #0
 8001a04:	f7fe fbe8 	bl	80001d8 <__aeabi_uldivmod>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a10:	4b0a      	ldr	r3, [pc, #40]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x160>)
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	0c1b      	lsrs	r3, r3, #16
 8001a16:	f003 0303 	and.w	r3, r3, #3
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001a20:	68fa      	ldr	r2, [r7, #12]
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a28:	60bb      	str	r3, [r7, #8]
      break;
 8001a2a:	e002      	b.n	8001a32 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a2c:	4b04      	ldr	r3, [pc, #16]	; (8001a40 <HAL_RCC_GetSysClockFreq+0x164>)
 8001a2e:	60bb      	str	r3, [r7, #8]
      break;
 8001a30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a32:	68bb      	ldr	r3, [r7, #8]
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3710      	adds	r7, #16
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bdb0      	pop	{r4, r5, r7, pc}
 8001a3c:	40023800 	.word	0x40023800
 8001a40:	00f42400 	.word	0x00f42400
 8001a44:	017d7840 	.word	0x017d7840

08001a48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a4c:	4b03      	ldr	r3, [pc, #12]	; (8001a5c <HAL_RCC_GetHCLKFreq+0x14>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	20000000 	.word	0x20000000

08001a60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a64:	f7ff fff0 	bl	8001a48 <HAL_RCC_GetHCLKFreq>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	4b05      	ldr	r3, [pc, #20]	; (8001a80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	0a9b      	lsrs	r3, r3, #10
 8001a70:	f003 0307 	and.w	r3, r3, #7
 8001a74:	4903      	ldr	r1, [pc, #12]	; (8001a84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a76:	5ccb      	ldrb	r3, [r1, r3]
 8001a78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	40023800 	.word	0x40023800
 8001a84:	08003700 	.word	0x08003700

08001a88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a8c:	f7ff ffdc 	bl	8001a48 <HAL_RCC_GetHCLKFreq>
 8001a90:	4602      	mov	r2, r0
 8001a92:	4b05      	ldr	r3, [pc, #20]	; (8001aa8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	0b5b      	lsrs	r3, r3, #13
 8001a98:	f003 0307 	and.w	r3, r3, #7
 8001a9c:	4903      	ldr	r1, [pc, #12]	; (8001aac <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a9e:	5ccb      	ldrb	r3, [r1, r3]
 8001aa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	40023800 	.word	0x40023800
 8001aac:	08003700 	.word	0x08003700

08001ab0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d101      	bne.n	8001ac2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e041      	b.n	8001b46 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d106      	bne.n	8001adc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f7fe ff4c 	bl	8000974 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2202      	movs	r2, #2
 8001ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	3304      	adds	r3, #4
 8001aec:	4619      	mov	r1, r3
 8001aee:	4610      	mov	r0, r2
 8001af0:	f000 fac0 	bl	8002074 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2201      	movs	r2, #1
 8001af8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2201      	movs	r2, #1
 8001b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2201      	movs	r2, #1
 8001b08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2201      	movs	r2, #1
 8001b18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2201      	movs	r2, #1
 8001b38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b082      	sub	sp, #8
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d101      	bne.n	8001b60 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e041      	b.n	8001be4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d106      	bne.n	8001b7a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f000 f839 	bl	8001bec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2202      	movs	r2, #2
 8001b7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	3304      	adds	r3, #4
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4610      	mov	r0, r2
 8001b8e:	f000 fa71 	bl	8002074 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2201      	movs	r2, #1
 8001b96:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2201      	movs	r2, #1
 8001bae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2201      	movs	r2, #1
 8001bce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2201      	movs	r2, #1
 8001bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001be2:	2300      	movs	r3, #0
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3708      	adds	r7, #8
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}

08001bec <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001bf4:	bf00      	nop
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d109      	bne.n	8001c24 <HAL_TIM_PWM_Start+0x24>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	bf14      	ite	ne
 8001c1c:	2301      	movne	r3, #1
 8001c1e:	2300      	moveq	r3, #0
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	e022      	b.n	8001c6a <HAL_TIM_PWM_Start+0x6a>
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	2b04      	cmp	r3, #4
 8001c28:	d109      	bne.n	8001c3e <HAL_TIM_PWM_Start+0x3e>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	bf14      	ite	ne
 8001c36:	2301      	movne	r3, #1
 8001c38:	2300      	moveq	r3, #0
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	e015      	b.n	8001c6a <HAL_TIM_PWM_Start+0x6a>
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	2b08      	cmp	r3, #8
 8001c42:	d109      	bne.n	8001c58 <HAL_TIM_PWM_Start+0x58>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	bf14      	ite	ne
 8001c50:	2301      	movne	r3, #1
 8001c52:	2300      	moveq	r3, #0
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	e008      	b.n	8001c6a <HAL_TIM_PWM_Start+0x6a>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	bf14      	ite	ne
 8001c64:	2301      	movne	r3, #1
 8001c66:	2300      	moveq	r3, #0
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e068      	b.n	8001d44 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d104      	bne.n	8001c82 <HAL_TIM_PWM_Start+0x82>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2202      	movs	r2, #2
 8001c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c80:	e013      	b.n	8001caa <HAL_TIM_PWM_Start+0xaa>
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	2b04      	cmp	r3, #4
 8001c86:	d104      	bne.n	8001c92 <HAL_TIM_PWM_Start+0x92>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2202      	movs	r2, #2
 8001c8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c90:	e00b      	b.n	8001caa <HAL_TIM_PWM_Start+0xaa>
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	2b08      	cmp	r3, #8
 8001c96:	d104      	bne.n	8001ca2 <HAL_TIM_PWM_Start+0xa2>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2202      	movs	r2, #2
 8001c9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ca0:	e003      	b.n	8001caa <HAL_TIM_PWM_Start+0xaa>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2202      	movs	r2, #2
 8001ca6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	6839      	ldr	r1, [r7, #0]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f000 fc84 	bl	80025c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a23      	ldr	r2, [pc, #140]	; (8001d4c <HAL_TIM_PWM_Start+0x14c>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d107      	bne.n	8001cd2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001cd0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a1d      	ldr	r2, [pc, #116]	; (8001d4c <HAL_TIM_PWM_Start+0x14c>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d018      	beq.n	8001d0e <HAL_TIM_PWM_Start+0x10e>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ce4:	d013      	beq.n	8001d0e <HAL_TIM_PWM_Start+0x10e>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a19      	ldr	r2, [pc, #100]	; (8001d50 <HAL_TIM_PWM_Start+0x150>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d00e      	beq.n	8001d0e <HAL_TIM_PWM_Start+0x10e>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a17      	ldr	r2, [pc, #92]	; (8001d54 <HAL_TIM_PWM_Start+0x154>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d009      	beq.n	8001d0e <HAL_TIM_PWM_Start+0x10e>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a16      	ldr	r2, [pc, #88]	; (8001d58 <HAL_TIM_PWM_Start+0x158>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d004      	beq.n	8001d0e <HAL_TIM_PWM_Start+0x10e>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a14      	ldr	r2, [pc, #80]	; (8001d5c <HAL_TIM_PWM_Start+0x15c>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d111      	bne.n	8001d32 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f003 0307 	and.w	r3, r3, #7
 8001d18:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2b06      	cmp	r3, #6
 8001d1e:	d010      	beq.n	8001d42 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f042 0201 	orr.w	r2, r2, #1
 8001d2e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d30:	e007      	b.n	8001d42 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f042 0201 	orr.w	r2, r2, #1
 8001d40:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d42:	2300      	movs	r3, #0
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3710      	adds	r7, #16
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	40010000 	.word	0x40010000
 8001d50:	40000400 	.word	0x40000400
 8001d54:	40000800 	.word	0x40000800
 8001d58:	40000c00 	.word	0x40000c00
 8001d5c:	40014000 	.word	0x40014000

08001d60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b086      	sub	sp, #24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	60b9      	str	r1, [r7, #8]
 8001d6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d101      	bne.n	8001d7e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	e0ae      	b.n	8001edc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2201      	movs	r2, #1
 8001d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2b0c      	cmp	r3, #12
 8001d8a:	f200 809f 	bhi.w	8001ecc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001d8e:	a201      	add	r2, pc, #4	; (adr r2, 8001d94 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d94:	08001dc9 	.word	0x08001dc9
 8001d98:	08001ecd 	.word	0x08001ecd
 8001d9c:	08001ecd 	.word	0x08001ecd
 8001da0:	08001ecd 	.word	0x08001ecd
 8001da4:	08001e09 	.word	0x08001e09
 8001da8:	08001ecd 	.word	0x08001ecd
 8001dac:	08001ecd 	.word	0x08001ecd
 8001db0:	08001ecd 	.word	0x08001ecd
 8001db4:	08001e4b 	.word	0x08001e4b
 8001db8:	08001ecd 	.word	0x08001ecd
 8001dbc:	08001ecd 	.word	0x08001ecd
 8001dc0:	08001ecd 	.word	0x08001ecd
 8001dc4:	08001e8b 	.word	0x08001e8b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	68b9      	ldr	r1, [r7, #8]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f000 f9d0 	bl	8002174 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	699a      	ldr	r2, [r3, #24]
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f042 0208 	orr.w	r2, r2, #8
 8001de2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	699a      	ldr	r2, [r3, #24]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f022 0204 	bic.w	r2, r2, #4
 8001df2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	6999      	ldr	r1, [r3, #24]
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	691a      	ldr	r2, [r3, #16]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	430a      	orrs	r2, r1
 8001e04:	619a      	str	r2, [r3, #24]
      break;
 8001e06:	e064      	b.n	8001ed2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	68b9      	ldr	r1, [r7, #8]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f000 fa16 	bl	8002240 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	699a      	ldr	r2, [r3, #24]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	699a      	ldr	r2, [r3, #24]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	6999      	ldr	r1, [r3, #24]
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	691b      	ldr	r3, [r3, #16]
 8001e3e:	021a      	lsls	r2, r3, #8
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	430a      	orrs	r2, r1
 8001e46:	619a      	str	r2, [r3, #24]
      break;
 8001e48:	e043      	b.n	8001ed2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	68b9      	ldr	r1, [r7, #8]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f000 fa61 	bl	8002318 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	69da      	ldr	r2, [r3, #28]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f042 0208 	orr.w	r2, r2, #8
 8001e64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	69da      	ldr	r2, [r3, #28]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f022 0204 	bic.w	r2, r2, #4
 8001e74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	69d9      	ldr	r1, [r3, #28]
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	691a      	ldr	r2, [r3, #16]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	430a      	orrs	r2, r1
 8001e86:	61da      	str	r2, [r3, #28]
      break;
 8001e88:	e023      	b.n	8001ed2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	68b9      	ldr	r1, [r7, #8]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f000 faab 	bl	80023ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	69da      	ldr	r2, [r3, #28]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ea4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	69da      	ldr	r2, [r3, #28]
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001eb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	69d9      	ldr	r1, [r3, #28]
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	691b      	ldr	r3, [r3, #16]
 8001ec0:	021a      	lsls	r2, r3, #8
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	61da      	str	r2, [r3, #28]
      break;
 8001eca:	e002      	b.n	8001ed2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	75fb      	strb	r3, [r7, #23]
      break;
 8001ed0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001eda:	7dfb      	ldrb	r3, [r7, #23]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3718      	adds	r7, #24
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d101      	bne.n	8001f00 <HAL_TIM_ConfigClockSource+0x1c>
 8001efc:	2302      	movs	r3, #2
 8001efe:	e0b4      	b.n	800206a <HAL_TIM_ConfigClockSource+0x186>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2201      	movs	r2, #1
 8001f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2202      	movs	r2, #2
 8001f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001f1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001f26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	68ba      	ldr	r2, [r7, #8]
 8001f2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f38:	d03e      	beq.n	8001fb8 <HAL_TIM_ConfigClockSource+0xd4>
 8001f3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f3e:	f200 8087 	bhi.w	8002050 <HAL_TIM_ConfigClockSource+0x16c>
 8001f42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f46:	f000 8086 	beq.w	8002056 <HAL_TIM_ConfigClockSource+0x172>
 8001f4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f4e:	d87f      	bhi.n	8002050 <HAL_TIM_ConfigClockSource+0x16c>
 8001f50:	2b70      	cmp	r3, #112	; 0x70
 8001f52:	d01a      	beq.n	8001f8a <HAL_TIM_ConfigClockSource+0xa6>
 8001f54:	2b70      	cmp	r3, #112	; 0x70
 8001f56:	d87b      	bhi.n	8002050 <HAL_TIM_ConfigClockSource+0x16c>
 8001f58:	2b60      	cmp	r3, #96	; 0x60
 8001f5a:	d050      	beq.n	8001ffe <HAL_TIM_ConfigClockSource+0x11a>
 8001f5c:	2b60      	cmp	r3, #96	; 0x60
 8001f5e:	d877      	bhi.n	8002050 <HAL_TIM_ConfigClockSource+0x16c>
 8001f60:	2b50      	cmp	r3, #80	; 0x50
 8001f62:	d03c      	beq.n	8001fde <HAL_TIM_ConfigClockSource+0xfa>
 8001f64:	2b50      	cmp	r3, #80	; 0x50
 8001f66:	d873      	bhi.n	8002050 <HAL_TIM_ConfigClockSource+0x16c>
 8001f68:	2b40      	cmp	r3, #64	; 0x40
 8001f6a:	d058      	beq.n	800201e <HAL_TIM_ConfigClockSource+0x13a>
 8001f6c:	2b40      	cmp	r3, #64	; 0x40
 8001f6e:	d86f      	bhi.n	8002050 <HAL_TIM_ConfigClockSource+0x16c>
 8001f70:	2b30      	cmp	r3, #48	; 0x30
 8001f72:	d064      	beq.n	800203e <HAL_TIM_ConfigClockSource+0x15a>
 8001f74:	2b30      	cmp	r3, #48	; 0x30
 8001f76:	d86b      	bhi.n	8002050 <HAL_TIM_ConfigClockSource+0x16c>
 8001f78:	2b20      	cmp	r3, #32
 8001f7a:	d060      	beq.n	800203e <HAL_TIM_ConfigClockSource+0x15a>
 8001f7c:	2b20      	cmp	r3, #32
 8001f7e:	d867      	bhi.n	8002050 <HAL_TIM_ConfigClockSource+0x16c>
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d05c      	beq.n	800203e <HAL_TIM_ConfigClockSource+0x15a>
 8001f84:	2b10      	cmp	r3, #16
 8001f86:	d05a      	beq.n	800203e <HAL_TIM_ConfigClockSource+0x15a>
 8001f88:	e062      	b.n	8002050 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6818      	ldr	r0, [r3, #0]
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	6899      	ldr	r1, [r3, #8]
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	685a      	ldr	r2, [r3, #4]
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	f000 faf1 	bl	8002580 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001fac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	68ba      	ldr	r2, [r7, #8]
 8001fb4:	609a      	str	r2, [r3, #8]
      break;
 8001fb6:	e04f      	b.n	8002058 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6818      	ldr	r0, [r3, #0]
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	6899      	ldr	r1, [r3, #8]
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685a      	ldr	r2, [r3, #4]
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	f000 fada 	bl	8002580 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	689a      	ldr	r2, [r3, #8]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001fda:	609a      	str	r2, [r3, #8]
      break;
 8001fdc:	e03c      	b.n	8002058 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6818      	ldr	r0, [r3, #0]
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	6859      	ldr	r1, [r3, #4]
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	461a      	mov	r2, r3
 8001fec:	f000 fa4e 	bl	800248c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2150      	movs	r1, #80	; 0x50
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f000 faa7 	bl	800254a <TIM_ITRx_SetConfig>
      break;
 8001ffc:	e02c      	b.n	8002058 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6818      	ldr	r0, [r3, #0]
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	6859      	ldr	r1, [r3, #4]
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	461a      	mov	r2, r3
 800200c:	f000 fa6d 	bl	80024ea <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2160      	movs	r1, #96	; 0x60
 8002016:	4618      	mov	r0, r3
 8002018:	f000 fa97 	bl	800254a <TIM_ITRx_SetConfig>
      break;
 800201c:	e01c      	b.n	8002058 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6818      	ldr	r0, [r3, #0]
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	6859      	ldr	r1, [r3, #4]
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	461a      	mov	r2, r3
 800202c:	f000 fa2e 	bl	800248c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2140      	movs	r1, #64	; 0x40
 8002036:	4618      	mov	r0, r3
 8002038:	f000 fa87 	bl	800254a <TIM_ITRx_SetConfig>
      break;
 800203c:	e00c      	b.n	8002058 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4619      	mov	r1, r3
 8002048:	4610      	mov	r0, r2
 800204a:	f000 fa7e 	bl	800254a <TIM_ITRx_SetConfig>
      break;
 800204e:	e003      	b.n	8002058 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	73fb      	strb	r3, [r7, #15]
      break;
 8002054:	e000      	b.n	8002058 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002056:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2201      	movs	r2, #1
 800205c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002068:	7bfb      	ldrb	r3, [r7, #15]
}
 800206a:	4618      	mov	r0, r3
 800206c:	3710      	adds	r7, #16
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
	...

08002074 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002074:	b480      	push	{r7}
 8002076:	b085      	sub	sp, #20
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	4a34      	ldr	r2, [pc, #208]	; (8002158 <TIM_Base_SetConfig+0xe4>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d00f      	beq.n	80020ac <TIM_Base_SetConfig+0x38>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002092:	d00b      	beq.n	80020ac <TIM_Base_SetConfig+0x38>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4a31      	ldr	r2, [pc, #196]	; (800215c <TIM_Base_SetConfig+0xe8>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d007      	beq.n	80020ac <TIM_Base_SetConfig+0x38>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4a30      	ldr	r2, [pc, #192]	; (8002160 <TIM_Base_SetConfig+0xec>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d003      	beq.n	80020ac <TIM_Base_SetConfig+0x38>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	4a2f      	ldr	r2, [pc, #188]	; (8002164 <TIM_Base_SetConfig+0xf0>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d108      	bne.n	80020be <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	68fa      	ldr	r2, [r7, #12]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a25      	ldr	r2, [pc, #148]	; (8002158 <TIM_Base_SetConfig+0xe4>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d01b      	beq.n	80020fe <TIM_Base_SetConfig+0x8a>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020cc:	d017      	beq.n	80020fe <TIM_Base_SetConfig+0x8a>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a22      	ldr	r2, [pc, #136]	; (800215c <TIM_Base_SetConfig+0xe8>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d013      	beq.n	80020fe <TIM_Base_SetConfig+0x8a>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a21      	ldr	r2, [pc, #132]	; (8002160 <TIM_Base_SetConfig+0xec>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d00f      	beq.n	80020fe <TIM_Base_SetConfig+0x8a>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a20      	ldr	r2, [pc, #128]	; (8002164 <TIM_Base_SetConfig+0xf0>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d00b      	beq.n	80020fe <TIM_Base_SetConfig+0x8a>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a1f      	ldr	r2, [pc, #124]	; (8002168 <TIM_Base_SetConfig+0xf4>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d007      	beq.n	80020fe <TIM_Base_SetConfig+0x8a>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a1e      	ldr	r2, [pc, #120]	; (800216c <TIM_Base_SetConfig+0xf8>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d003      	beq.n	80020fe <TIM_Base_SetConfig+0x8a>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a1d      	ldr	r2, [pc, #116]	; (8002170 <TIM_Base_SetConfig+0xfc>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d108      	bne.n	8002110 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002104:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	68fa      	ldr	r2, [r7, #12]
 800210c:	4313      	orrs	r3, r2
 800210e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	695b      	ldr	r3, [r3, #20]
 800211a:	4313      	orrs	r3, r2
 800211c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	68fa      	ldr	r2, [r7, #12]
 8002122:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	689a      	ldr	r2, [r3, #8]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4a08      	ldr	r2, [pc, #32]	; (8002158 <TIM_Base_SetConfig+0xe4>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d103      	bne.n	8002144 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	691a      	ldr	r2, [r3, #16]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2201      	movs	r2, #1
 8002148:	615a      	str	r2, [r3, #20]
}
 800214a:	bf00      	nop
 800214c:	3714      	adds	r7, #20
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	40010000 	.word	0x40010000
 800215c:	40000400 	.word	0x40000400
 8002160:	40000800 	.word	0x40000800
 8002164:	40000c00 	.word	0x40000c00
 8002168:	40014000 	.word	0x40014000
 800216c:	40014400 	.word	0x40014400
 8002170:	40014800 	.word	0x40014800

08002174 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002174:	b480      	push	{r7}
 8002176:	b087      	sub	sp, #28
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a1b      	ldr	r3, [r3, #32]
 8002182:	f023 0201 	bic.w	r2, r3, #1
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a1b      	ldr	r3, [r3, #32]
 800218e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	699b      	ldr	r3, [r3, #24]
 800219a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f023 0303 	bic.w	r3, r3, #3
 80021aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	68fa      	ldr	r2, [r7, #12]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	f023 0302 	bic.w	r3, r3, #2
 80021bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	697a      	ldr	r2, [r7, #20]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	4a1c      	ldr	r2, [pc, #112]	; (800223c <TIM_OC1_SetConfig+0xc8>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d10c      	bne.n	80021ea <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	f023 0308 	bic.w	r3, r3, #8
 80021d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	697a      	ldr	r2, [r7, #20]
 80021de:	4313      	orrs	r3, r2
 80021e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	f023 0304 	bic.w	r3, r3, #4
 80021e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a13      	ldr	r2, [pc, #76]	; (800223c <TIM_OC1_SetConfig+0xc8>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d111      	bne.n	8002216 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002200:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	695b      	ldr	r3, [r3, #20]
 8002206:	693a      	ldr	r2, [r7, #16]
 8002208:	4313      	orrs	r3, r2
 800220a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	699b      	ldr	r3, [r3, #24]
 8002210:	693a      	ldr	r2, [r7, #16]
 8002212:	4313      	orrs	r3, r2
 8002214:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	693a      	ldr	r2, [r7, #16]
 800221a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	68fa      	ldr	r2, [r7, #12]
 8002220:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685a      	ldr	r2, [r3, #4]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	697a      	ldr	r2, [r7, #20]
 800222e:	621a      	str	r2, [r3, #32]
}
 8002230:	bf00      	nop
 8002232:	371c      	adds	r7, #28
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr
 800223c:	40010000 	.word	0x40010000

08002240 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002240:	b480      	push	{r7}
 8002242:	b087      	sub	sp, #28
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6a1b      	ldr	r3, [r3, #32]
 800224e:	f023 0210 	bic.w	r2, r3, #16
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a1b      	ldr	r3, [r3, #32]
 800225a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	699b      	ldr	r3, [r3, #24]
 8002266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800226e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002276:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	021b      	lsls	r3, r3, #8
 800227e:	68fa      	ldr	r2, [r7, #12]
 8002280:	4313      	orrs	r3, r2
 8002282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	f023 0320 	bic.w	r3, r3, #32
 800228a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	011b      	lsls	r3, r3, #4
 8002292:	697a      	ldr	r2, [r7, #20]
 8002294:	4313      	orrs	r3, r2
 8002296:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	4a1e      	ldr	r2, [pc, #120]	; (8002314 <TIM_OC2_SetConfig+0xd4>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d10d      	bne.n	80022bc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80022a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	011b      	lsls	r3, r3, #4
 80022ae:	697a      	ldr	r2, [r7, #20]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80022ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	4a15      	ldr	r2, [pc, #84]	; (8002314 <TIM_OC2_SetConfig+0xd4>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d113      	bne.n	80022ec <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80022ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80022d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	695b      	ldr	r3, [r3, #20]
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	693a      	ldr	r2, [r7, #16]
 80022dc:	4313      	orrs	r3, r2
 80022de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	699b      	ldr	r3, [r3, #24]
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	693a      	ldr	r2, [r7, #16]
 80022f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	68fa      	ldr	r2, [r7, #12]
 80022f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685a      	ldr	r2, [r3, #4]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	697a      	ldr	r2, [r7, #20]
 8002304:	621a      	str	r2, [r3, #32]
}
 8002306:	bf00      	nop
 8002308:	371c      	adds	r7, #28
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	40010000 	.word	0x40010000

08002318 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002318:	b480      	push	{r7}
 800231a:	b087      	sub	sp, #28
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a1b      	ldr	r3, [r3, #32]
 8002326:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a1b      	ldr	r3, [r3, #32]
 8002332:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	69db      	ldr	r3, [r3, #28]
 800233e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002346:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f023 0303 	bic.w	r3, r3, #3
 800234e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	68fa      	ldr	r2, [r7, #12]
 8002356:	4313      	orrs	r3, r2
 8002358:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002360:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	021b      	lsls	r3, r3, #8
 8002368:	697a      	ldr	r2, [r7, #20]
 800236a:	4313      	orrs	r3, r2
 800236c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a1d      	ldr	r2, [pc, #116]	; (80023e8 <TIM_OC3_SetConfig+0xd0>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d10d      	bne.n	8002392 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800237c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	021b      	lsls	r3, r3, #8
 8002384:	697a      	ldr	r2, [r7, #20]
 8002386:	4313      	orrs	r3, r2
 8002388:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002390:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a14      	ldr	r2, [pc, #80]	; (80023e8 <TIM_OC3_SetConfig+0xd0>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d113      	bne.n	80023c2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80023a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80023a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	695b      	ldr	r3, [r3, #20]
 80023ae:	011b      	lsls	r3, r3, #4
 80023b0:	693a      	ldr	r2, [r7, #16]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	699b      	ldr	r3, [r3, #24]
 80023ba:	011b      	lsls	r3, r3, #4
 80023bc:	693a      	ldr	r2, [r7, #16]
 80023be:	4313      	orrs	r3, r2
 80023c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	693a      	ldr	r2, [r7, #16]
 80023c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	68fa      	ldr	r2, [r7, #12]
 80023cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	685a      	ldr	r2, [r3, #4]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	697a      	ldr	r2, [r7, #20]
 80023da:	621a      	str	r2, [r3, #32]
}
 80023dc:	bf00      	nop
 80023de:	371c      	adds	r7, #28
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr
 80023e8:	40010000 	.word	0x40010000

080023ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b087      	sub	sp, #28
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6a1b      	ldr	r3, [r3, #32]
 80023fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a1b      	ldr	r3, [r3, #32]
 8002406:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	69db      	ldr	r3, [r3, #28]
 8002412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800241a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002422:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	021b      	lsls	r3, r3, #8
 800242a:	68fa      	ldr	r2, [r7, #12]
 800242c:	4313      	orrs	r3, r2
 800242e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002436:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	031b      	lsls	r3, r3, #12
 800243e:	693a      	ldr	r2, [r7, #16]
 8002440:	4313      	orrs	r3, r2
 8002442:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	4a10      	ldr	r2, [pc, #64]	; (8002488 <TIM_OC4_SetConfig+0x9c>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d109      	bne.n	8002460 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002452:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	695b      	ldr	r3, [r3, #20]
 8002458:	019b      	lsls	r3, r3, #6
 800245a:	697a      	ldr	r2, [r7, #20]
 800245c:	4313      	orrs	r3, r2
 800245e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	697a      	ldr	r2, [r7, #20]
 8002464:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	68fa      	ldr	r2, [r7, #12]
 800246a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685a      	ldr	r2, [r3, #4]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	621a      	str	r2, [r3, #32]
}
 800247a:	bf00      	nop
 800247c:	371c      	adds	r7, #28
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	40010000 	.word	0x40010000

0800248c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800248c:	b480      	push	{r7}
 800248e:	b087      	sub	sp, #28
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6a1b      	ldr	r3, [r3, #32]
 800249c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6a1b      	ldr	r3, [r3, #32]
 80024a2:	f023 0201 	bic.w	r2, r3, #1
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	011b      	lsls	r3, r3, #4
 80024bc:	693a      	ldr	r2, [r7, #16]
 80024be:	4313      	orrs	r3, r2
 80024c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	f023 030a 	bic.w	r3, r3, #10
 80024c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80024ca:	697a      	ldr	r2, [r7, #20]
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	693a      	ldr	r2, [r7, #16]
 80024d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	697a      	ldr	r2, [r7, #20]
 80024dc:	621a      	str	r2, [r3, #32]
}
 80024de:	bf00      	nop
 80024e0:	371c      	adds	r7, #28
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr

080024ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024ea:	b480      	push	{r7}
 80024ec:	b087      	sub	sp, #28
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	60f8      	str	r0, [r7, #12]
 80024f2:	60b9      	str	r1, [r7, #8]
 80024f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6a1b      	ldr	r3, [r3, #32]
 80024fa:	f023 0210 	bic.w	r2, r3, #16
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	699b      	ldr	r3, [r3, #24]
 8002506:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6a1b      	ldr	r3, [r3, #32]
 800250c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002514:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	031b      	lsls	r3, r3, #12
 800251a:	697a      	ldr	r2, [r7, #20]
 800251c:	4313      	orrs	r3, r2
 800251e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002526:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	011b      	lsls	r3, r3, #4
 800252c:	693a      	ldr	r2, [r7, #16]
 800252e:	4313      	orrs	r3, r2
 8002530:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	697a      	ldr	r2, [r7, #20]
 8002536:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	693a      	ldr	r2, [r7, #16]
 800253c:	621a      	str	r2, [r3, #32]
}
 800253e:	bf00      	nop
 8002540:	371c      	adds	r7, #28
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr

0800254a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800254a:	b480      	push	{r7}
 800254c:	b085      	sub	sp, #20
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
 8002552:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002560:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002562:	683a      	ldr	r2, [r7, #0]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	4313      	orrs	r3, r2
 8002568:	f043 0307 	orr.w	r3, r3, #7
 800256c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	68fa      	ldr	r2, [r7, #12]
 8002572:	609a      	str	r2, [r3, #8]
}
 8002574:	bf00      	nop
 8002576:	3714      	adds	r7, #20
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002580:	b480      	push	{r7}
 8002582:	b087      	sub	sp, #28
 8002584:	af00      	add	r7, sp, #0
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	607a      	str	r2, [r7, #4]
 800258c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800259a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	021a      	lsls	r2, r3, #8
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	431a      	orrs	r2, r3
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	697a      	ldr	r2, [r7, #20]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	697a      	ldr	r2, [r7, #20]
 80025b2:	609a      	str	r2, [r3, #8]
}
 80025b4:	bf00      	nop
 80025b6:	371c      	adds	r7, #28
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr

080025c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b087      	sub	sp, #28
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	f003 031f 	and.w	r3, r3, #31
 80025d2:	2201      	movs	r2, #1
 80025d4:	fa02 f303 	lsl.w	r3, r2, r3
 80025d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6a1a      	ldr	r2, [r3, #32]
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	43db      	mvns	r3, r3
 80025e2:	401a      	ands	r2, r3
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6a1a      	ldr	r2, [r3, #32]
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	f003 031f 	and.w	r3, r3, #31
 80025f2:	6879      	ldr	r1, [r7, #4]
 80025f4:	fa01 f303 	lsl.w	r3, r1, r3
 80025f8:	431a      	orrs	r2, r3
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	621a      	str	r2, [r3, #32]
}
 80025fe:	bf00      	nop
 8002600:	371c      	adds	r7, #28
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
	...

0800260c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800260c:	b480      	push	{r7}
 800260e:	b085      	sub	sp, #20
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800261c:	2b01      	cmp	r3, #1
 800261e:	d101      	bne.n	8002624 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002620:	2302      	movs	r3, #2
 8002622:	e050      	b.n	80026c6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2202      	movs	r2, #2
 8002630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800264a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	68fa      	ldr	r2, [r7, #12]
 8002652:	4313      	orrs	r3, r2
 8002654:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	68fa      	ldr	r2, [r7, #12]
 800265c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a1c      	ldr	r2, [pc, #112]	; (80026d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d018      	beq.n	800269a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002670:	d013      	beq.n	800269a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a18      	ldr	r2, [pc, #96]	; (80026d8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d00e      	beq.n	800269a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a16      	ldr	r2, [pc, #88]	; (80026dc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d009      	beq.n	800269a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a15      	ldr	r2, [pc, #84]	; (80026e0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d004      	beq.n	800269a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a13      	ldr	r2, [pc, #76]	; (80026e4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d10c      	bne.n	80026b4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	68ba      	ldr	r2, [r7, #8]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	68ba      	ldr	r2, [r7, #8]
 80026b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3714      	adds	r7, #20
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	40010000 	.word	0x40010000
 80026d8:	40000400 	.word	0x40000400
 80026dc:	40000800 	.word	0x40000800
 80026e0:	40000c00 	.word	0x40000c00
 80026e4:	40014000 	.word	0x40014000

080026e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d101      	bne.n	80026fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e03f      	b.n	800277a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002700:	b2db      	uxtb	r3, r3
 8002702:	2b00      	cmp	r3, #0
 8002704:	d106      	bne.n	8002714 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f7fe f988 	bl	8000a24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2224      	movs	r2, #36	; 0x24
 8002718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	68da      	ldr	r2, [r3, #12]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800272a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f000 f9cb 	bl	8002ac8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	691a      	ldr	r2, [r3, #16]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002740:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	695a      	ldr	r2, [r3, #20]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002750:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	68da      	ldr	r2, [r3, #12]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002760:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2220      	movs	r2, #32
 800276c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2220      	movs	r2, #32
 8002774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}

08002782 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b08a      	sub	sp, #40	; 0x28
 8002786:	af02      	add	r7, sp, #8
 8002788:	60f8      	str	r0, [r7, #12]
 800278a:	60b9      	str	r1, [r7, #8]
 800278c:	603b      	str	r3, [r7, #0]
 800278e:	4613      	mov	r3, r2
 8002790:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002792:	2300      	movs	r3, #0
 8002794:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800279c:	b2db      	uxtb	r3, r3
 800279e:	2b20      	cmp	r3, #32
 80027a0:	d17c      	bne.n	800289c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d002      	beq.n	80027ae <HAL_UART_Transmit+0x2c>
 80027a8:	88fb      	ldrh	r3, [r7, #6]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d101      	bne.n	80027b2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e075      	b.n	800289e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d101      	bne.n	80027c0 <HAL_UART_Transmit+0x3e>
 80027bc:	2302      	movs	r3, #2
 80027be:	e06e      	b.n	800289e <HAL_UART_Transmit+0x11c>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2201      	movs	r2, #1
 80027c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2200      	movs	r2, #0
 80027cc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2221      	movs	r2, #33	; 0x21
 80027d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027d6:	f7fe fa6f 	bl	8000cb8 <HAL_GetTick>
 80027da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	88fa      	ldrh	r2, [r7, #6]
 80027e0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	88fa      	ldrh	r2, [r7, #6]
 80027e6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027f0:	d108      	bne.n	8002804 <HAL_UART_Transmit+0x82>
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d104      	bne.n	8002804 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80027fa:	2300      	movs	r3, #0
 80027fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	61bb      	str	r3, [r7, #24]
 8002802:	e003      	b.n	800280c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002808:	2300      	movs	r3, #0
 800280a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002814:	e02a      	b.n	800286c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	9300      	str	r3, [sp, #0]
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	2200      	movs	r2, #0
 800281e:	2180      	movs	r1, #128	; 0x80
 8002820:	68f8      	ldr	r0, [r7, #12]
 8002822:	f000 f8e2 	bl	80029ea <UART_WaitOnFlagUntilTimeout>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e036      	b.n	800289e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d10b      	bne.n	800284e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	881b      	ldrh	r3, [r3, #0]
 800283a:	461a      	mov	r2, r3
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002844:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	3302      	adds	r3, #2
 800284a:	61bb      	str	r3, [r7, #24]
 800284c:	e007      	b.n	800285e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	781a      	ldrb	r2, [r3, #0]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	3301      	adds	r3, #1
 800285c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002862:	b29b      	uxth	r3, r3
 8002864:	3b01      	subs	r3, #1
 8002866:	b29a      	uxth	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002870:	b29b      	uxth	r3, r3
 8002872:	2b00      	cmp	r3, #0
 8002874:	d1cf      	bne.n	8002816 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	9300      	str	r3, [sp, #0]
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	2200      	movs	r2, #0
 800287e:	2140      	movs	r1, #64	; 0x40
 8002880:	68f8      	ldr	r0, [r7, #12]
 8002882:	f000 f8b2 	bl	80029ea <UART_WaitOnFlagUntilTimeout>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d001      	beq.n	8002890 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e006      	b.n	800289e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2220      	movs	r2, #32
 8002894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002898:	2300      	movs	r3, #0
 800289a:	e000      	b.n	800289e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800289c:	2302      	movs	r3, #2
  }
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3720      	adds	r7, #32
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}

080028a6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028a6:	b580      	push	{r7, lr}
 80028a8:	b08a      	sub	sp, #40	; 0x28
 80028aa:	af02      	add	r7, sp, #8
 80028ac:	60f8      	str	r0, [r7, #12]
 80028ae:	60b9      	str	r1, [r7, #8]
 80028b0:	603b      	str	r3, [r7, #0]
 80028b2:	4613      	mov	r3, r2
 80028b4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80028b6:	2300      	movs	r3, #0
 80028b8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	2b20      	cmp	r3, #32
 80028c4:	f040 808c 	bne.w	80029e0 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d002      	beq.n	80028d4 <HAL_UART_Receive+0x2e>
 80028ce:	88fb      	ldrh	r3, [r7, #6]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d101      	bne.n	80028d8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e084      	b.n	80029e2 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d101      	bne.n	80028e6 <HAL_UART_Receive+0x40>
 80028e2:	2302      	movs	r3, #2
 80028e4:	e07d      	b.n	80029e2 <HAL_UART_Receive+0x13c>
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2201      	movs	r2, #1
 80028ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2200      	movs	r2, #0
 80028f2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2222      	movs	r2, #34	; 0x22
 80028f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2200      	movs	r2, #0
 8002900:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002902:	f7fe f9d9 	bl	8000cb8 <HAL_GetTick>
 8002906:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	88fa      	ldrh	r2, [r7, #6]
 800290c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	88fa      	ldrh	r2, [r7, #6]
 8002912:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800291c:	d108      	bne.n	8002930 <HAL_UART_Receive+0x8a>
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d104      	bne.n	8002930 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002926:	2300      	movs	r3, #0
 8002928:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	61bb      	str	r3, [r7, #24]
 800292e:	e003      	b.n	8002938 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002934:	2300      	movs	r3, #0
 8002936:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002940:	e043      	b.n	80029ca <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	9300      	str	r3, [sp, #0]
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	2200      	movs	r2, #0
 800294a:	2120      	movs	r1, #32
 800294c:	68f8      	ldr	r0, [r7, #12]
 800294e:	f000 f84c 	bl	80029ea <UART_WaitOnFlagUntilTimeout>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d001      	beq.n	800295c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002958:	2303      	movs	r3, #3
 800295a:	e042      	b.n	80029e2 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d10c      	bne.n	800297c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	b29b      	uxth	r3, r3
 800296a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800296e:	b29a      	uxth	r2, r3
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	3302      	adds	r3, #2
 8002978:	61bb      	str	r3, [r7, #24]
 800297a:	e01f      	b.n	80029bc <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002984:	d007      	beq.n	8002996 <HAL_UART_Receive+0xf0>
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d10a      	bne.n	80029a4 <HAL_UART_Receive+0xfe>
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d106      	bne.n	80029a4 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	b2da      	uxtb	r2, r3
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	701a      	strb	r2, [r3, #0]
 80029a2:	e008      	b.n	80029b6 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80029b0:	b2da      	uxtb	r2, r3
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	3301      	adds	r3, #1
 80029ba:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	3b01      	subs	r3, #1
 80029c4:	b29a      	uxth	r2, r3
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d1b6      	bne.n	8002942 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2220      	movs	r2, #32
 80029d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80029dc:	2300      	movs	r3, #0
 80029de:	e000      	b.n	80029e2 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80029e0:	2302      	movs	r3, #2
  }
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3720      	adds	r7, #32
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}

080029ea <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b090      	sub	sp, #64	; 0x40
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	60f8      	str	r0, [r7, #12]
 80029f2:	60b9      	str	r1, [r7, #8]
 80029f4:	603b      	str	r3, [r7, #0]
 80029f6:	4613      	mov	r3, r2
 80029f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029fa:	e050      	b.n	8002a9e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a02:	d04c      	beq.n	8002a9e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002a04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d007      	beq.n	8002a1a <UART_WaitOnFlagUntilTimeout+0x30>
 8002a0a:	f7fe f955 	bl	8000cb8 <HAL_GetTick>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d241      	bcs.n	8002a9e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	330c      	adds	r3, #12
 8002a20:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a24:	e853 3f00 	ldrex	r3, [r3]
 8002a28:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002a30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	330c      	adds	r3, #12
 8002a38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a3a:	637a      	str	r2, [r7, #52]	; 0x34
 8002a3c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a3e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a42:	e841 2300 	strex	r3, r2, [r1]
 8002a46:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d1e5      	bne.n	8002a1a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	3314      	adds	r3, #20
 8002a54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	e853 3f00 	ldrex	r3, [r3]
 8002a5c:	613b      	str	r3, [r7, #16]
   return(result);
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	f023 0301 	bic.w	r3, r3, #1
 8002a64:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	3314      	adds	r3, #20
 8002a6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a6e:	623a      	str	r2, [r7, #32]
 8002a70:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a72:	69f9      	ldr	r1, [r7, #28]
 8002a74:	6a3a      	ldr	r2, [r7, #32]
 8002a76:	e841 2300 	strex	r3, r2, [r1]
 8002a7a:	61bb      	str	r3, [r7, #24]
   return(result);
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d1e5      	bne.n	8002a4e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2220      	movs	r2, #32
 8002a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2220      	movs	r2, #32
 8002a8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e00f      	b.n	8002abe <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	68ba      	ldr	r2, [r7, #8]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	bf0c      	ite	eq
 8002aae:	2301      	moveq	r3, #1
 8002ab0:	2300      	movne	r3, #0
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	79fb      	ldrb	r3, [r7, #7]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d09f      	beq.n	80029fc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3740      	adds	r7, #64	; 0x40
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
	...

08002ac8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002acc:	b09f      	sub	sp, #124	; 0x7c
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ad2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	691b      	ldr	r3, [r3, #16]
 8002ad8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002adc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ade:	68d9      	ldr	r1, [r3, #12]
 8002ae0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	ea40 0301 	orr.w	r3, r0, r1
 8002ae8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002aea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002aec:	689a      	ldr	r2, [r3, #8]
 8002aee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	431a      	orrs	r2, r3
 8002af4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002af6:	695b      	ldr	r3, [r3, #20]
 8002af8:	431a      	orrs	r2, r3
 8002afa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002afc:	69db      	ldr	r3, [r3, #28]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002b02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002b0c:	f021 010c 	bic.w	r1, r1, #12
 8002b10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b16:	430b      	orrs	r3, r1
 8002b18:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	695b      	ldr	r3, [r3, #20]
 8002b20:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002b24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b26:	6999      	ldr	r1, [r3, #24]
 8002b28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	ea40 0301 	orr.w	r3, r0, r1
 8002b30:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	4bc5      	ldr	r3, [pc, #788]	; (8002e4c <UART_SetConfig+0x384>)
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d004      	beq.n	8002b46 <UART_SetConfig+0x7e>
 8002b3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	4bc3      	ldr	r3, [pc, #780]	; (8002e50 <UART_SetConfig+0x388>)
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d103      	bne.n	8002b4e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002b46:	f7fe ff9f 	bl	8001a88 <HAL_RCC_GetPCLK2Freq>
 8002b4a:	6778      	str	r0, [r7, #116]	; 0x74
 8002b4c:	e002      	b.n	8002b54 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002b4e:	f7fe ff87 	bl	8001a60 <HAL_RCC_GetPCLK1Freq>
 8002b52:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b56:	69db      	ldr	r3, [r3, #28]
 8002b58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b5c:	f040 80b6 	bne.w	8002ccc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002b60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b62:	461c      	mov	r4, r3
 8002b64:	f04f 0500 	mov.w	r5, #0
 8002b68:	4622      	mov	r2, r4
 8002b6a:	462b      	mov	r3, r5
 8002b6c:	1891      	adds	r1, r2, r2
 8002b6e:	6439      	str	r1, [r7, #64]	; 0x40
 8002b70:	415b      	adcs	r3, r3
 8002b72:	647b      	str	r3, [r7, #68]	; 0x44
 8002b74:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002b78:	1912      	adds	r2, r2, r4
 8002b7a:	eb45 0303 	adc.w	r3, r5, r3
 8002b7e:	f04f 0000 	mov.w	r0, #0
 8002b82:	f04f 0100 	mov.w	r1, #0
 8002b86:	00d9      	lsls	r1, r3, #3
 8002b88:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002b8c:	00d0      	lsls	r0, r2, #3
 8002b8e:	4602      	mov	r2, r0
 8002b90:	460b      	mov	r3, r1
 8002b92:	1911      	adds	r1, r2, r4
 8002b94:	6639      	str	r1, [r7, #96]	; 0x60
 8002b96:	416b      	adcs	r3, r5
 8002b98:	667b      	str	r3, [r7, #100]	; 0x64
 8002b9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	f04f 0300 	mov.w	r3, #0
 8002ba4:	1891      	adds	r1, r2, r2
 8002ba6:	63b9      	str	r1, [r7, #56]	; 0x38
 8002ba8:	415b      	adcs	r3, r3
 8002baa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002bb0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002bb4:	f7fd fb10 	bl	80001d8 <__aeabi_uldivmod>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	460b      	mov	r3, r1
 8002bbc:	4ba5      	ldr	r3, [pc, #660]	; (8002e54 <UART_SetConfig+0x38c>)
 8002bbe:	fba3 2302 	umull	r2, r3, r3, r2
 8002bc2:	095b      	lsrs	r3, r3, #5
 8002bc4:	011e      	lsls	r6, r3, #4
 8002bc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bc8:	461c      	mov	r4, r3
 8002bca:	f04f 0500 	mov.w	r5, #0
 8002bce:	4622      	mov	r2, r4
 8002bd0:	462b      	mov	r3, r5
 8002bd2:	1891      	adds	r1, r2, r2
 8002bd4:	6339      	str	r1, [r7, #48]	; 0x30
 8002bd6:	415b      	adcs	r3, r3
 8002bd8:	637b      	str	r3, [r7, #52]	; 0x34
 8002bda:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002bde:	1912      	adds	r2, r2, r4
 8002be0:	eb45 0303 	adc.w	r3, r5, r3
 8002be4:	f04f 0000 	mov.w	r0, #0
 8002be8:	f04f 0100 	mov.w	r1, #0
 8002bec:	00d9      	lsls	r1, r3, #3
 8002bee:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002bf2:	00d0      	lsls	r0, r2, #3
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	460b      	mov	r3, r1
 8002bf8:	1911      	adds	r1, r2, r4
 8002bfa:	65b9      	str	r1, [r7, #88]	; 0x58
 8002bfc:	416b      	adcs	r3, r5
 8002bfe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	461a      	mov	r2, r3
 8002c06:	f04f 0300 	mov.w	r3, #0
 8002c0a:	1891      	adds	r1, r2, r2
 8002c0c:	62b9      	str	r1, [r7, #40]	; 0x28
 8002c0e:	415b      	adcs	r3, r3
 8002c10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c12:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c16:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002c1a:	f7fd fadd 	bl	80001d8 <__aeabi_uldivmod>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	460b      	mov	r3, r1
 8002c22:	4b8c      	ldr	r3, [pc, #560]	; (8002e54 <UART_SetConfig+0x38c>)
 8002c24:	fba3 1302 	umull	r1, r3, r3, r2
 8002c28:	095b      	lsrs	r3, r3, #5
 8002c2a:	2164      	movs	r1, #100	; 0x64
 8002c2c:	fb01 f303 	mul.w	r3, r1, r3
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	00db      	lsls	r3, r3, #3
 8002c34:	3332      	adds	r3, #50	; 0x32
 8002c36:	4a87      	ldr	r2, [pc, #540]	; (8002e54 <UART_SetConfig+0x38c>)
 8002c38:	fba2 2303 	umull	r2, r3, r2, r3
 8002c3c:	095b      	lsrs	r3, r3, #5
 8002c3e:	005b      	lsls	r3, r3, #1
 8002c40:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002c44:	441e      	add	r6, r3
 8002c46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f04f 0100 	mov.w	r1, #0
 8002c4e:	4602      	mov	r2, r0
 8002c50:	460b      	mov	r3, r1
 8002c52:	1894      	adds	r4, r2, r2
 8002c54:	623c      	str	r4, [r7, #32]
 8002c56:	415b      	adcs	r3, r3
 8002c58:	627b      	str	r3, [r7, #36]	; 0x24
 8002c5a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c5e:	1812      	adds	r2, r2, r0
 8002c60:	eb41 0303 	adc.w	r3, r1, r3
 8002c64:	f04f 0400 	mov.w	r4, #0
 8002c68:	f04f 0500 	mov.w	r5, #0
 8002c6c:	00dd      	lsls	r5, r3, #3
 8002c6e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002c72:	00d4      	lsls	r4, r2, #3
 8002c74:	4622      	mov	r2, r4
 8002c76:	462b      	mov	r3, r5
 8002c78:	1814      	adds	r4, r2, r0
 8002c7a:	653c      	str	r4, [r7, #80]	; 0x50
 8002c7c:	414b      	adcs	r3, r1
 8002c7e:	657b      	str	r3, [r7, #84]	; 0x54
 8002c80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	461a      	mov	r2, r3
 8002c86:	f04f 0300 	mov.w	r3, #0
 8002c8a:	1891      	adds	r1, r2, r2
 8002c8c:	61b9      	str	r1, [r7, #24]
 8002c8e:	415b      	adcs	r3, r3
 8002c90:	61fb      	str	r3, [r7, #28]
 8002c92:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c96:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002c9a:	f7fd fa9d 	bl	80001d8 <__aeabi_uldivmod>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	4b6c      	ldr	r3, [pc, #432]	; (8002e54 <UART_SetConfig+0x38c>)
 8002ca4:	fba3 1302 	umull	r1, r3, r3, r2
 8002ca8:	095b      	lsrs	r3, r3, #5
 8002caa:	2164      	movs	r1, #100	; 0x64
 8002cac:	fb01 f303 	mul.w	r3, r1, r3
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	00db      	lsls	r3, r3, #3
 8002cb4:	3332      	adds	r3, #50	; 0x32
 8002cb6:	4a67      	ldr	r2, [pc, #412]	; (8002e54 <UART_SetConfig+0x38c>)
 8002cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cbc:	095b      	lsrs	r3, r3, #5
 8002cbe:	f003 0207 	and.w	r2, r3, #7
 8002cc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4432      	add	r2, r6
 8002cc8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002cca:	e0b9      	b.n	8002e40 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ccc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cce:	461c      	mov	r4, r3
 8002cd0:	f04f 0500 	mov.w	r5, #0
 8002cd4:	4622      	mov	r2, r4
 8002cd6:	462b      	mov	r3, r5
 8002cd8:	1891      	adds	r1, r2, r2
 8002cda:	6139      	str	r1, [r7, #16]
 8002cdc:	415b      	adcs	r3, r3
 8002cde:	617b      	str	r3, [r7, #20]
 8002ce0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002ce4:	1912      	adds	r2, r2, r4
 8002ce6:	eb45 0303 	adc.w	r3, r5, r3
 8002cea:	f04f 0000 	mov.w	r0, #0
 8002cee:	f04f 0100 	mov.w	r1, #0
 8002cf2:	00d9      	lsls	r1, r3, #3
 8002cf4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002cf8:	00d0      	lsls	r0, r2, #3
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	eb12 0804 	adds.w	r8, r2, r4
 8002d02:	eb43 0905 	adc.w	r9, r3, r5
 8002d06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f04f 0100 	mov.w	r1, #0
 8002d10:	f04f 0200 	mov.w	r2, #0
 8002d14:	f04f 0300 	mov.w	r3, #0
 8002d18:	008b      	lsls	r3, r1, #2
 8002d1a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002d1e:	0082      	lsls	r2, r0, #2
 8002d20:	4640      	mov	r0, r8
 8002d22:	4649      	mov	r1, r9
 8002d24:	f7fd fa58 	bl	80001d8 <__aeabi_uldivmod>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	460b      	mov	r3, r1
 8002d2c:	4b49      	ldr	r3, [pc, #292]	; (8002e54 <UART_SetConfig+0x38c>)
 8002d2e:	fba3 2302 	umull	r2, r3, r3, r2
 8002d32:	095b      	lsrs	r3, r3, #5
 8002d34:	011e      	lsls	r6, r3, #4
 8002d36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f04f 0100 	mov.w	r1, #0
 8002d3e:	4602      	mov	r2, r0
 8002d40:	460b      	mov	r3, r1
 8002d42:	1894      	adds	r4, r2, r2
 8002d44:	60bc      	str	r4, [r7, #8]
 8002d46:	415b      	adcs	r3, r3
 8002d48:	60fb      	str	r3, [r7, #12]
 8002d4a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d4e:	1812      	adds	r2, r2, r0
 8002d50:	eb41 0303 	adc.w	r3, r1, r3
 8002d54:	f04f 0400 	mov.w	r4, #0
 8002d58:	f04f 0500 	mov.w	r5, #0
 8002d5c:	00dd      	lsls	r5, r3, #3
 8002d5e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002d62:	00d4      	lsls	r4, r2, #3
 8002d64:	4622      	mov	r2, r4
 8002d66:	462b      	mov	r3, r5
 8002d68:	1814      	adds	r4, r2, r0
 8002d6a:	64bc      	str	r4, [r7, #72]	; 0x48
 8002d6c:	414b      	adcs	r3, r1
 8002d6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f04f 0100 	mov.w	r1, #0
 8002d7a:	f04f 0200 	mov.w	r2, #0
 8002d7e:	f04f 0300 	mov.w	r3, #0
 8002d82:	008b      	lsls	r3, r1, #2
 8002d84:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002d88:	0082      	lsls	r2, r0, #2
 8002d8a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002d8e:	f7fd fa23 	bl	80001d8 <__aeabi_uldivmod>
 8002d92:	4602      	mov	r2, r0
 8002d94:	460b      	mov	r3, r1
 8002d96:	4b2f      	ldr	r3, [pc, #188]	; (8002e54 <UART_SetConfig+0x38c>)
 8002d98:	fba3 1302 	umull	r1, r3, r3, r2
 8002d9c:	095b      	lsrs	r3, r3, #5
 8002d9e:	2164      	movs	r1, #100	; 0x64
 8002da0:	fb01 f303 	mul.w	r3, r1, r3
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	011b      	lsls	r3, r3, #4
 8002da8:	3332      	adds	r3, #50	; 0x32
 8002daa:	4a2a      	ldr	r2, [pc, #168]	; (8002e54 <UART_SetConfig+0x38c>)
 8002dac:	fba2 2303 	umull	r2, r3, r2, r3
 8002db0:	095b      	lsrs	r3, r3, #5
 8002db2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002db6:	441e      	add	r6, r3
 8002db8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f04f 0100 	mov.w	r1, #0
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	460b      	mov	r3, r1
 8002dc4:	1894      	adds	r4, r2, r2
 8002dc6:	603c      	str	r4, [r7, #0]
 8002dc8:	415b      	adcs	r3, r3
 8002dca:	607b      	str	r3, [r7, #4]
 8002dcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002dd0:	1812      	adds	r2, r2, r0
 8002dd2:	eb41 0303 	adc.w	r3, r1, r3
 8002dd6:	f04f 0400 	mov.w	r4, #0
 8002dda:	f04f 0500 	mov.w	r5, #0
 8002dde:	00dd      	lsls	r5, r3, #3
 8002de0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002de4:	00d4      	lsls	r4, r2, #3
 8002de6:	4622      	mov	r2, r4
 8002de8:	462b      	mov	r3, r5
 8002dea:	eb12 0a00 	adds.w	sl, r2, r0
 8002dee:	eb43 0b01 	adc.w	fp, r3, r1
 8002df2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f04f 0100 	mov.w	r1, #0
 8002dfc:	f04f 0200 	mov.w	r2, #0
 8002e00:	f04f 0300 	mov.w	r3, #0
 8002e04:	008b      	lsls	r3, r1, #2
 8002e06:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002e0a:	0082      	lsls	r2, r0, #2
 8002e0c:	4650      	mov	r0, sl
 8002e0e:	4659      	mov	r1, fp
 8002e10:	f7fd f9e2 	bl	80001d8 <__aeabi_uldivmod>
 8002e14:	4602      	mov	r2, r0
 8002e16:	460b      	mov	r3, r1
 8002e18:	4b0e      	ldr	r3, [pc, #56]	; (8002e54 <UART_SetConfig+0x38c>)
 8002e1a:	fba3 1302 	umull	r1, r3, r3, r2
 8002e1e:	095b      	lsrs	r3, r3, #5
 8002e20:	2164      	movs	r1, #100	; 0x64
 8002e22:	fb01 f303 	mul.w	r3, r1, r3
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	011b      	lsls	r3, r3, #4
 8002e2a:	3332      	adds	r3, #50	; 0x32
 8002e2c:	4a09      	ldr	r2, [pc, #36]	; (8002e54 <UART_SetConfig+0x38c>)
 8002e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e32:	095b      	lsrs	r3, r3, #5
 8002e34:	f003 020f 	and.w	r2, r3, #15
 8002e38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4432      	add	r2, r6
 8002e3e:	609a      	str	r2, [r3, #8]
}
 8002e40:	bf00      	nop
 8002e42:	377c      	adds	r7, #124	; 0x7c
 8002e44:	46bd      	mov	sp, r7
 8002e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e4a:	bf00      	nop
 8002e4c:	40011000 	.word	0x40011000
 8002e50:	40011400 	.word	0x40011400
 8002e54:	51eb851f 	.word	0x51eb851f

08002e58 <__errno>:
 8002e58:	4b01      	ldr	r3, [pc, #4]	; (8002e60 <__errno+0x8>)
 8002e5a:	6818      	ldr	r0, [r3, #0]
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	2000000c 	.word	0x2000000c

08002e64 <__libc_init_array>:
 8002e64:	b570      	push	{r4, r5, r6, lr}
 8002e66:	4d0d      	ldr	r5, [pc, #52]	; (8002e9c <__libc_init_array+0x38>)
 8002e68:	4c0d      	ldr	r4, [pc, #52]	; (8002ea0 <__libc_init_array+0x3c>)
 8002e6a:	1b64      	subs	r4, r4, r5
 8002e6c:	10a4      	asrs	r4, r4, #2
 8002e6e:	2600      	movs	r6, #0
 8002e70:	42a6      	cmp	r6, r4
 8002e72:	d109      	bne.n	8002e88 <__libc_init_array+0x24>
 8002e74:	4d0b      	ldr	r5, [pc, #44]	; (8002ea4 <__libc_init_array+0x40>)
 8002e76:	4c0c      	ldr	r4, [pc, #48]	; (8002ea8 <__libc_init_array+0x44>)
 8002e78:	f000 fc2e 	bl	80036d8 <_init>
 8002e7c:	1b64      	subs	r4, r4, r5
 8002e7e:	10a4      	asrs	r4, r4, #2
 8002e80:	2600      	movs	r6, #0
 8002e82:	42a6      	cmp	r6, r4
 8002e84:	d105      	bne.n	8002e92 <__libc_init_array+0x2e>
 8002e86:	bd70      	pop	{r4, r5, r6, pc}
 8002e88:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e8c:	4798      	blx	r3
 8002e8e:	3601      	adds	r6, #1
 8002e90:	e7ee      	b.n	8002e70 <__libc_init_array+0xc>
 8002e92:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e96:	4798      	blx	r3
 8002e98:	3601      	adds	r6, #1
 8002e9a:	e7f2      	b.n	8002e82 <__libc_init_array+0x1e>
 8002e9c:	08003774 	.word	0x08003774
 8002ea0:	08003774 	.word	0x08003774
 8002ea4:	08003774 	.word	0x08003774
 8002ea8:	08003778 	.word	0x08003778

08002eac <memset>:
 8002eac:	4402      	add	r2, r0
 8002eae:	4603      	mov	r3, r0
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d100      	bne.n	8002eb6 <memset+0xa>
 8002eb4:	4770      	bx	lr
 8002eb6:	f803 1b01 	strb.w	r1, [r3], #1
 8002eba:	e7f9      	b.n	8002eb0 <memset+0x4>

08002ebc <setvbuf>:
 8002ebc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002ec0:	461d      	mov	r5, r3
 8002ec2:	4b5d      	ldr	r3, [pc, #372]	; (8003038 <setvbuf+0x17c>)
 8002ec4:	681f      	ldr	r7, [r3, #0]
 8002ec6:	4604      	mov	r4, r0
 8002ec8:	460e      	mov	r6, r1
 8002eca:	4690      	mov	r8, r2
 8002ecc:	b127      	cbz	r7, 8002ed8 <setvbuf+0x1c>
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	b913      	cbnz	r3, 8002ed8 <setvbuf+0x1c>
 8002ed2:	4638      	mov	r0, r7
 8002ed4:	f000 f9d2 	bl	800327c <__sinit>
 8002ed8:	4b58      	ldr	r3, [pc, #352]	; (800303c <setvbuf+0x180>)
 8002eda:	429c      	cmp	r4, r3
 8002edc:	d167      	bne.n	8002fae <setvbuf+0xf2>
 8002ede:	687c      	ldr	r4, [r7, #4]
 8002ee0:	f1b8 0f02 	cmp.w	r8, #2
 8002ee4:	d006      	beq.n	8002ef4 <setvbuf+0x38>
 8002ee6:	f1b8 0f01 	cmp.w	r8, #1
 8002eea:	f200 809f 	bhi.w	800302c <setvbuf+0x170>
 8002eee:	2d00      	cmp	r5, #0
 8002ef0:	f2c0 809c 	blt.w	800302c <setvbuf+0x170>
 8002ef4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002ef6:	07db      	lsls	r3, r3, #31
 8002ef8:	d405      	bmi.n	8002f06 <setvbuf+0x4a>
 8002efa:	89a3      	ldrh	r3, [r4, #12]
 8002efc:	0598      	lsls	r0, r3, #22
 8002efe:	d402      	bmi.n	8002f06 <setvbuf+0x4a>
 8002f00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002f02:	f000 fa59 	bl	80033b8 <__retarget_lock_acquire_recursive>
 8002f06:	4621      	mov	r1, r4
 8002f08:	4638      	mov	r0, r7
 8002f0a:	f000 f923 	bl	8003154 <_fflush_r>
 8002f0e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002f10:	b141      	cbz	r1, 8002f24 <setvbuf+0x68>
 8002f12:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002f16:	4299      	cmp	r1, r3
 8002f18:	d002      	beq.n	8002f20 <setvbuf+0x64>
 8002f1a:	4638      	mov	r0, r7
 8002f1c:	f000 fa7a 	bl	8003414 <_free_r>
 8002f20:	2300      	movs	r3, #0
 8002f22:	6363      	str	r3, [r4, #52]	; 0x34
 8002f24:	2300      	movs	r3, #0
 8002f26:	61a3      	str	r3, [r4, #24]
 8002f28:	6063      	str	r3, [r4, #4]
 8002f2a:	89a3      	ldrh	r3, [r4, #12]
 8002f2c:	0619      	lsls	r1, r3, #24
 8002f2e:	d503      	bpl.n	8002f38 <setvbuf+0x7c>
 8002f30:	6921      	ldr	r1, [r4, #16]
 8002f32:	4638      	mov	r0, r7
 8002f34:	f000 fa6e 	bl	8003414 <_free_r>
 8002f38:	89a3      	ldrh	r3, [r4, #12]
 8002f3a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8002f3e:	f023 0303 	bic.w	r3, r3, #3
 8002f42:	f1b8 0f02 	cmp.w	r8, #2
 8002f46:	81a3      	strh	r3, [r4, #12]
 8002f48:	d06c      	beq.n	8003024 <setvbuf+0x168>
 8002f4a:	ab01      	add	r3, sp, #4
 8002f4c:	466a      	mov	r2, sp
 8002f4e:	4621      	mov	r1, r4
 8002f50:	4638      	mov	r0, r7
 8002f52:	f000 fa33 	bl	80033bc <__swhatbuf_r>
 8002f56:	89a3      	ldrh	r3, [r4, #12]
 8002f58:	4318      	orrs	r0, r3
 8002f5a:	81a0      	strh	r0, [r4, #12]
 8002f5c:	2d00      	cmp	r5, #0
 8002f5e:	d130      	bne.n	8002fc2 <setvbuf+0x106>
 8002f60:	9d00      	ldr	r5, [sp, #0]
 8002f62:	4628      	mov	r0, r5
 8002f64:	f000 fa4e 	bl	8003404 <malloc>
 8002f68:	4606      	mov	r6, r0
 8002f6a:	2800      	cmp	r0, #0
 8002f6c:	d155      	bne.n	800301a <setvbuf+0x15e>
 8002f6e:	f8dd 9000 	ldr.w	r9, [sp]
 8002f72:	45a9      	cmp	r9, r5
 8002f74:	d14a      	bne.n	800300c <setvbuf+0x150>
 8002f76:	f04f 35ff 	mov.w	r5, #4294967295
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	60a2      	str	r2, [r4, #8]
 8002f7e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8002f82:	6022      	str	r2, [r4, #0]
 8002f84:	6122      	str	r2, [r4, #16]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f8c:	6162      	str	r2, [r4, #20]
 8002f8e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002f90:	f043 0302 	orr.w	r3, r3, #2
 8002f94:	07d2      	lsls	r2, r2, #31
 8002f96:	81a3      	strh	r3, [r4, #12]
 8002f98:	d405      	bmi.n	8002fa6 <setvbuf+0xea>
 8002f9a:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002f9e:	d102      	bne.n	8002fa6 <setvbuf+0xea>
 8002fa0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002fa2:	f000 fa0a 	bl	80033ba <__retarget_lock_release_recursive>
 8002fa6:	4628      	mov	r0, r5
 8002fa8:	b003      	add	sp, #12
 8002faa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002fae:	4b24      	ldr	r3, [pc, #144]	; (8003040 <setvbuf+0x184>)
 8002fb0:	429c      	cmp	r4, r3
 8002fb2:	d101      	bne.n	8002fb8 <setvbuf+0xfc>
 8002fb4:	68bc      	ldr	r4, [r7, #8]
 8002fb6:	e793      	b.n	8002ee0 <setvbuf+0x24>
 8002fb8:	4b22      	ldr	r3, [pc, #136]	; (8003044 <setvbuf+0x188>)
 8002fba:	429c      	cmp	r4, r3
 8002fbc:	bf08      	it	eq
 8002fbe:	68fc      	ldreq	r4, [r7, #12]
 8002fc0:	e78e      	b.n	8002ee0 <setvbuf+0x24>
 8002fc2:	2e00      	cmp	r6, #0
 8002fc4:	d0cd      	beq.n	8002f62 <setvbuf+0xa6>
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	b913      	cbnz	r3, 8002fd0 <setvbuf+0x114>
 8002fca:	4638      	mov	r0, r7
 8002fcc:	f000 f956 	bl	800327c <__sinit>
 8002fd0:	f1b8 0f01 	cmp.w	r8, #1
 8002fd4:	bf08      	it	eq
 8002fd6:	89a3      	ldrheq	r3, [r4, #12]
 8002fd8:	6026      	str	r6, [r4, #0]
 8002fda:	bf04      	itt	eq
 8002fdc:	f043 0301 	orreq.w	r3, r3, #1
 8002fe0:	81a3      	strheq	r3, [r4, #12]
 8002fe2:	89a2      	ldrh	r2, [r4, #12]
 8002fe4:	f012 0308 	ands.w	r3, r2, #8
 8002fe8:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8002fec:	d01c      	beq.n	8003028 <setvbuf+0x16c>
 8002fee:	07d3      	lsls	r3, r2, #31
 8002ff0:	bf41      	itttt	mi
 8002ff2:	2300      	movmi	r3, #0
 8002ff4:	426d      	negmi	r5, r5
 8002ff6:	60a3      	strmi	r3, [r4, #8]
 8002ff8:	61a5      	strmi	r5, [r4, #24]
 8002ffa:	bf58      	it	pl
 8002ffc:	60a5      	strpl	r5, [r4, #8]
 8002ffe:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8003000:	f015 0501 	ands.w	r5, r5, #1
 8003004:	d115      	bne.n	8003032 <setvbuf+0x176>
 8003006:	f412 7f00 	tst.w	r2, #512	; 0x200
 800300a:	e7c8      	b.n	8002f9e <setvbuf+0xe2>
 800300c:	4648      	mov	r0, r9
 800300e:	f000 f9f9 	bl	8003404 <malloc>
 8003012:	4606      	mov	r6, r0
 8003014:	2800      	cmp	r0, #0
 8003016:	d0ae      	beq.n	8002f76 <setvbuf+0xba>
 8003018:	464d      	mov	r5, r9
 800301a:	89a3      	ldrh	r3, [r4, #12]
 800301c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003020:	81a3      	strh	r3, [r4, #12]
 8003022:	e7d0      	b.n	8002fc6 <setvbuf+0x10a>
 8003024:	2500      	movs	r5, #0
 8003026:	e7a8      	b.n	8002f7a <setvbuf+0xbe>
 8003028:	60a3      	str	r3, [r4, #8]
 800302a:	e7e8      	b.n	8002ffe <setvbuf+0x142>
 800302c:	f04f 35ff 	mov.w	r5, #4294967295
 8003030:	e7b9      	b.n	8002fa6 <setvbuf+0xea>
 8003032:	2500      	movs	r5, #0
 8003034:	e7b7      	b.n	8002fa6 <setvbuf+0xea>
 8003036:	bf00      	nop
 8003038:	2000000c 	.word	0x2000000c
 800303c:	0800372c 	.word	0x0800372c
 8003040:	0800374c 	.word	0x0800374c
 8003044:	0800370c 	.word	0x0800370c

08003048 <__sflush_r>:
 8003048:	898a      	ldrh	r2, [r1, #12]
 800304a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800304e:	4605      	mov	r5, r0
 8003050:	0710      	lsls	r0, r2, #28
 8003052:	460c      	mov	r4, r1
 8003054:	d458      	bmi.n	8003108 <__sflush_r+0xc0>
 8003056:	684b      	ldr	r3, [r1, #4]
 8003058:	2b00      	cmp	r3, #0
 800305a:	dc05      	bgt.n	8003068 <__sflush_r+0x20>
 800305c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800305e:	2b00      	cmp	r3, #0
 8003060:	dc02      	bgt.n	8003068 <__sflush_r+0x20>
 8003062:	2000      	movs	r0, #0
 8003064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003068:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800306a:	2e00      	cmp	r6, #0
 800306c:	d0f9      	beq.n	8003062 <__sflush_r+0x1a>
 800306e:	2300      	movs	r3, #0
 8003070:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003074:	682f      	ldr	r7, [r5, #0]
 8003076:	602b      	str	r3, [r5, #0]
 8003078:	d032      	beq.n	80030e0 <__sflush_r+0x98>
 800307a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800307c:	89a3      	ldrh	r3, [r4, #12]
 800307e:	075a      	lsls	r2, r3, #29
 8003080:	d505      	bpl.n	800308e <__sflush_r+0x46>
 8003082:	6863      	ldr	r3, [r4, #4]
 8003084:	1ac0      	subs	r0, r0, r3
 8003086:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003088:	b10b      	cbz	r3, 800308e <__sflush_r+0x46>
 800308a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800308c:	1ac0      	subs	r0, r0, r3
 800308e:	2300      	movs	r3, #0
 8003090:	4602      	mov	r2, r0
 8003092:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003094:	6a21      	ldr	r1, [r4, #32]
 8003096:	4628      	mov	r0, r5
 8003098:	47b0      	blx	r6
 800309a:	1c43      	adds	r3, r0, #1
 800309c:	89a3      	ldrh	r3, [r4, #12]
 800309e:	d106      	bne.n	80030ae <__sflush_r+0x66>
 80030a0:	6829      	ldr	r1, [r5, #0]
 80030a2:	291d      	cmp	r1, #29
 80030a4:	d82c      	bhi.n	8003100 <__sflush_r+0xb8>
 80030a6:	4a2a      	ldr	r2, [pc, #168]	; (8003150 <__sflush_r+0x108>)
 80030a8:	40ca      	lsrs	r2, r1
 80030aa:	07d6      	lsls	r6, r2, #31
 80030ac:	d528      	bpl.n	8003100 <__sflush_r+0xb8>
 80030ae:	2200      	movs	r2, #0
 80030b0:	6062      	str	r2, [r4, #4]
 80030b2:	04d9      	lsls	r1, r3, #19
 80030b4:	6922      	ldr	r2, [r4, #16]
 80030b6:	6022      	str	r2, [r4, #0]
 80030b8:	d504      	bpl.n	80030c4 <__sflush_r+0x7c>
 80030ba:	1c42      	adds	r2, r0, #1
 80030bc:	d101      	bne.n	80030c2 <__sflush_r+0x7a>
 80030be:	682b      	ldr	r3, [r5, #0]
 80030c0:	b903      	cbnz	r3, 80030c4 <__sflush_r+0x7c>
 80030c2:	6560      	str	r0, [r4, #84]	; 0x54
 80030c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80030c6:	602f      	str	r7, [r5, #0]
 80030c8:	2900      	cmp	r1, #0
 80030ca:	d0ca      	beq.n	8003062 <__sflush_r+0x1a>
 80030cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80030d0:	4299      	cmp	r1, r3
 80030d2:	d002      	beq.n	80030da <__sflush_r+0x92>
 80030d4:	4628      	mov	r0, r5
 80030d6:	f000 f99d 	bl	8003414 <_free_r>
 80030da:	2000      	movs	r0, #0
 80030dc:	6360      	str	r0, [r4, #52]	; 0x34
 80030de:	e7c1      	b.n	8003064 <__sflush_r+0x1c>
 80030e0:	6a21      	ldr	r1, [r4, #32]
 80030e2:	2301      	movs	r3, #1
 80030e4:	4628      	mov	r0, r5
 80030e6:	47b0      	blx	r6
 80030e8:	1c41      	adds	r1, r0, #1
 80030ea:	d1c7      	bne.n	800307c <__sflush_r+0x34>
 80030ec:	682b      	ldr	r3, [r5, #0]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d0c4      	beq.n	800307c <__sflush_r+0x34>
 80030f2:	2b1d      	cmp	r3, #29
 80030f4:	d001      	beq.n	80030fa <__sflush_r+0xb2>
 80030f6:	2b16      	cmp	r3, #22
 80030f8:	d101      	bne.n	80030fe <__sflush_r+0xb6>
 80030fa:	602f      	str	r7, [r5, #0]
 80030fc:	e7b1      	b.n	8003062 <__sflush_r+0x1a>
 80030fe:	89a3      	ldrh	r3, [r4, #12]
 8003100:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003104:	81a3      	strh	r3, [r4, #12]
 8003106:	e7ad      	b.n	8003064 <__sflush_r+0x1c>
 8003108:	690f      	ldr	r7, [r1, #16]
 800310a:	2f00      	cmp	r7, #0
 800310c:	d0a9      	beq.n	8003062 <__sflush_r+0x1a>
 800310e:	0793      	lsls	r3, r2, #30
 8003110:	680e      	ldr	r6, [r1, #0]
 8003112:	bf08      	it	eq
 8003114:	694b      	ldreq	r3, [r1, #20]
 8003116:	600f      	str	r7, [r1, #0]
 8003118:	bf18      	it	ne
 800311a:	2300      	movne	r3, #0
 800311c:	eba6 0807 	sub.w	r8, r6, r7
 8003120:	608b      	str	r3, [r1, #8]
 8003122:	f1b8 0f00 	cmp.w	r8, #0
 8003126:	dd9c      	ble.n	8003062 <__sflush_r+0x1a>
 8003128:	6a21      	ldr	r1, [r4, #32]
 800312a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800312c:	4643      	mov	r3, r8
 800312e:	463a      	mov	r2, r7
 8003130:	4628      	mov	r0, r5
 8003132:	47b0      	blx	r6
 8003134:	2800      	cmp	r0, #0
 8003136:	dc06      	bgt.n	8003146 <__sflush_r+0xfe>
 8003138:	89a3      	ldrh	r3, [r4, #12]
 800313a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800313e:	81a3      	strh	r3, [r4, #12]
 8003140:	f04f 30ff 	mov.w	r0, #4294967295
 8003144:	e78e      	b.n	8003064 <__sflush_r+0x1c>
 8003146:	4407      	add	r7, r0
 8003148:	eba8 0800 	sub.w	r8, r8, r0
 800314c:	e7e9      	b.n	8003122 <__sflush_r+0xda>
 800314e:	bf00      	nop
 8003150:	20400001 	.word	0x20400001

08003154 <_fflush_r>:
 8003154:	b538      	push	{r3, r4, r5, lr}
 8003156:	690b      	ldr	r3, [r1, #16]
 8003158:	4605      	mov	r5, r0
 800315a:	460c      	mov	r4, r1
 800315c:	b913      	cbnz	r3, 8003164 <_fflush_r+0x10>
 800315e:	2500      	movs	r5, #0
 8003160:	4628      	mov	r0, r5
 8003162:	bd38      	pop	{r3, r4, r5, pc}
 8003164:	b118      	cbz	r0, 800316e <_fflush_r+0x1a>
 8003166:	6983      	ldr	r3, [r0, #24]
 8003168:	b90b      	cbnz	r3, 800316e <_fflush_r+0x1a>
 800316a:	f000 f887 	bl	800327c <__sinit>
 800316e:	4b14      	ldr	r3, [pc, #80]	; (80031c0 <_fflush_r+0x6c>)
 8003170:	429c      	cmp	r4, r3
 8003172:	d11b      	bne.n	80031ac <_fflush_r+0x58>
 8003174:	686c      	ldr	r4, [r5, #4]
 8003176:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d0ef      	beq.n	800315e <_fflush_r+0xa>
 800317e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003180:	07d0      	lsls	r0, r2, #31
 8003182:	d404      	bmi.n	800318e <_fflush_r+0x3a>
 8003184:	0599      	lsls	r1, r3, #22
 8003186:	d402      	bmi.n	800318e <_fflush_r+0x3a>
 8003188:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800318a:	f000 f915 	bl	80033b8 <__retarget_lock_acquire_recursive>
 800318e:	4628      	mov	r0, r5
 8003190:	4621      	mov	r1, r4
 8003192:	f7ff ff59 	bl	8003048 <__sflush_r>
 8003196:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003198:	07da      	lsls	r2, r3, #31
 800319a:	4605      	mov	r5, r0
 800319c:	d4e0      	bmi.n	8003160 <_fflush_r+0xc>
 800319e:	89a3      	ldrh	r3, [r4, #12]
 80031a0:	059b      	lsls	r3, r3, #22
 80031a2:	d4dd      	bmi.n	8003160 <_fflush_r+0xc>
 80031a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80031a6:	f000 f908 	bl	80033ba <__retarget_lock_release_recursive>
 80031aa:	e7d9      	b.n	8003160 <_fflush_r+0xc>
 80031ac:	4b05      	ldr	r3, [pc, #20]	; (80031c4 <_fflush_r+0x70>)
 80031ae:	429c      	cmp	r4, r3
 80031b0:	d101      	bne.n	80031b6 <_fflush_r+0x62>
 80031b2:	68ac      	ldr	r4, [r5, #8]
 80031b4:	e7df      	b.n	8003176 <_fflush_r+0x22>
 80031b6:	4b04      	ldr	r3, [pc, #16]	; (80031c8 <_fflush_r+0x74>)
 80031b8:	429c      	cmp	r4, r3
 80031ba:	bf08      	it	eq
 80031bc:	68ec      	ldreq	r4, [r5, #12]
 80031be:	e7da      	b.n	8003176 <_fflush_r+0x22>
 80031c0:	0800372c 	.word	0x0800372c
 80031c4:	0800374c 	.word	0x0800374c
 80031c8:	0800370c 	.word	0x0800370c

080031cc <std>:
 80031cc:	2300      	movs	r3, #0
 80031ce:	b510      	push	{r4, lr}
 80031d0:	4604      	mov	r4, r0
 80031d2:	e9c0 3300 	strd	r3, r3, [r0]
 80031d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80031da:	6083      	str	r3, [r0, #8]
 80031dc:	8181      	strh	r1, [r0, #12]
 80031de:	6643      	str	r3, [r0, #100]	; 0x64
 80031e0:	81c2      	strh	r2, [r0, #14]
 80031e2:	6183      	str	r3, [r0, #24]
 80031e4:	4619      	mov	r1, r3
 80031e6:	2208      	movs	r2, #8
 80031e8:	305c      	adds	r0, #92	; 0x5c
 80031ea:	f7ff fe5f 	bl	8002eac <memset>
 80031ee:	4b05      	ldr	r3, [pc, #20]	; (8003204 <std+0x38>)
 80031f0:	6263      	str	r3, [r4, #36]	; 0x24
 80031f2:	4b05      	ldr	r3, [pc, #20]	; (8003208 <std+0x3c>)
 80031f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80031f6:	4b05      	ldr	r3, [pc, #20]	; (800320c <std+0x40>)
 80031f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80031fa:	4b05      	ldr	r3, [pc, #20]	; (8003210 <std+0x44>)
 80031fc:	6224      	str	r4, [r4, #32]
 80031fe:	6323      	str	r3, [r4, #48]	; 0x30
 8003200:	bd10      	pop	{r4, pc}
 8003202:	bf00      	nop
 8003204:	08003589 	.word	0x08003589
 8003208:	080035ab 	.word	0x080035ab
 800320c:	080035e3 	.word	0x080035e3
 8003210:	08003607 	.word	0x08003607

08003214 <_cleanup_r>:
 8003214:	4901      	ldr	r1, [pc, #4]	; (800321c <_cleanup_r+0x8>)
 8003216:	f000 b8af 	b.w	8003378 <_fwalk_reent>
 800321a:	bf00      	nop
 800321c:	08003155 	.word	0x08003155

08003220 <__sfmoreglue>:
 8003220:	b570      	push	{r4, r5, r6, lr}
 8003222:	1e4a      	subs	r2, r1, #1
 8003224:	2568      	movs	r5, #104	; 0x68
 8003226:	4355      	muls	r5, r2
 8003228:	460e      	mov	r6, r1
 800322a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800322e:	f000 f941 	bl	80034b4 <_malloc_r>
 8003232:	4604      	mov	r4, r0
 8003234:	b140      	cbz	r0, 8003248 <__sfmoreglue+0x28>
 8003236:	2100      	movs	r1, #0
 8003238:	e9c0 1600 	strd	r1, r6, [r0]
 800323c:	300c      	adds	r0, #12
 800323e:	60a0      	str	r0, [r4, #8]
 8003240:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003244:	f7ff fe32 	bl	8002eac <memset>
 8003248:	4620      	mov	r0, r4
 800324a:	bd70      	pop	{r4, r5, r6, pc}

0800324c <__sfp_lock_acquire>:
 800324c:	4801      	ldr	r0, [pc, #4]	; (8003254 <__sfp_lock_acquire+0x8>)
 800324e:	f000 b8b3 	b.w	80033b8 <__retarget_lock_acquire_recursive>
 8003252:	bf00      	nop
 8003254:	20000134 	.word	0x20000134

08003258 <__sfp_lock_release>:
 8003258:	4801      	ldr	r0, [pc, #4]	; (8003260 <__sfp_lock_release+0x8>)
 800325a:	f000 b8ae 	b.w	80033ba <__retarget_lock_release_recursive>
 800325e:	bf00      	nop
 8003260:	20000134 	.word	0x20000134

08003264 <__sinit_lock_acquire>:
 8003264:	4801      	ldr	r0, [pc, #4]	; (800326c <__sinit_lock_acquire+0x8>)
 8003266:	f000 b8a7 	b.w	80033b8 <__retarget_lock_acquire_recursive>
 800326a:	bf00      	nop
 800326c:	2000012f 	.word	0x2000012f

08003270 <__sinit_lock_release>:
 8003270:	4801      	ldr	r0, [pc, #4]	; (8003278 <__sinit_lock_release+0x8>)
 8003272:	f000 b8a2 	b.w	80033ba <__retarget_lock_release_recursive>
 8003276:	bf00      	nop
 8003278:	2000012f 	.word	0x2000012f

0800327c <__sinit>:
 800327c:	b510      	push	{r4, lr}
 800327e:	4604      	mov	r4, r0
 8003280:	f7ff fff0 	bl	8003264 <__sinit_lock_acquire>
 8003284:	69a3      	ldr	r3, [r4, #24]
 8003286:	b11b      	cbz	r3, 8003290 <__sinit+0x14>
 8003288:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800328c:	f7ff bff0 	b.w	8003270 <__sinit_lock_release>
 8003290:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003294:	6523      	str	r3, [r4, #80]	; 0x50
 8003296:	4b13      	ldr	r3, [pc, #76]	; (80032e4 <__sinit+0x68>)
 8003298:	4a13      	ldr	r2, [pc, #76]	; (80032e8 <__sinit+0x6c>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	62a2      	str	r2, [r4, #40]	; 0x28
 800329e:	42a3      	cmp	r3, r4
 80032a0:	bf04      	itt	eq
 80032a2:	2301      	moveq	r3, #1
 80032a4:	61a3      	streq	r3, [r4, #24]
 80032a6:	4620      	mov	r0, r4
 80032a8:	f000 f820 	bl	80032ec <__sfp>
 80032ac:	6060      	str	r0, [r4, #4]
 80032ae:	4620      	mov	r0, r4
 80032b0:	f000 f81c 	bl	80032ec <__sfp>
 80032b4:	60a0      	str	r0, [r4, #8]
 80032b6:	4620      	mov	r0, r4
 80032b8:	f000 f818 	bl	80032ec <__sfp>
 80032bc:	2200      	movs	r2, #0
 80032be:	60e0      	str	r0, [r4, #12]
 80032c0:	2104      	movs	r1, #4
 80032c2:	6860      	ldr	r0, [r4, #4]
 80032c4:	f7ff ff82 	bl	80031cc <std>
 80032c8:	68a0      	ldr	r0, [r4, #8]
 80032ca:	2201      	movs	r2, #1
 80032cc:	2109      	movs	r1, #9
 80032ce:	f7ff ff7d 	bl	80031cc <std>
 80032d2:	68e0      	ldr	r0, [r4, #12]
 80032d4:	2202      	movs	r2, #2
 80032d6:	2112      	movs	r1, #18
 80032d8:	f7ff ff78 	bl	80031cc <std>
 80032dc:	2301      	movs	r3, #1
 80032de:	61a3      	str	r3, [r4, #24]
 80032e0:	e7d2      	b.n	8003288 <__sinit+0xc>
 80032e2:	bf00      	nop
 80032e4:	08003708 	.word	0x08003708
 80032e8:	08003215 	.word	0x08003215

080032ec <__sfp>:
 80032ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ee:	4607      	mov	r7, r0
 80032f0:	f7ff ffac 	bl	800324c <__sfp_lock_acquire>
 80032f4:	4b1e      	ldr	r3, [pc, #120]	; (8003370 <__sfp+0x84>)
 80032f6:	681e      	ldr	r6, [r3, #0]
 80032f8:	69b3      	ldr	r3, [r6, #24]
 80032fa:	b913      	cbnz	r3, 8003302 <__sfp+0x16>
 80032fc:	4630      	mov	r0, r6
 80032fe:	f7ff ffbd 	bl	800327c <__sinit>
 8003302:	3648      	adds	r6, #72	; 0x48
 8003304:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003308:	3b01      	subs	r3, #1
 800330a:	d503      	bpl.n	8003314 <__sfp+0x28>
 800330c:	6833      	ldr	r3, [r6, #0]
 800330e:	b30b      	cbz	r3, 8003354 <__sfp+0x68>
 8003310:	6836      	ldr	r6, [r6, #0]
 8003312:	e7f7      	b.n	8003304 <__sfp+0x18>
 8003314:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003318:	b9d5      	cbnz	r5, 8003350 <__sfp+0x64>
 800331a:	4b16      	ldr	r3, [pc, #88]	; (8003374 <__sfp+0x88>)
 800331c:	60e3      	str	r3, [r4, #12]
 800331e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003322:	6665      	str	r5, [r4, #100]	; 0x64
 8003324:	f000 f847 	bl	80033b6 <__retarget_lock_init_recursive>
 8003328:	f7ff ff96 	bl	8003258 <__sfp_lock_release>
 800332c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003330:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003334:	6025      	str	r5, [r4, #0]
 8003336:	61a5      	str	r5, [r4, #24]
 8003338:	2208      	movs	r2, #8
 800333a:	4629      	mov	r1, r5
 800333c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003340:	f7ff fdb4 	bl	8002eac <memset>
 8003344:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003348:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800334c:	4620      	mov	r0, r4
 800334e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003350:	3468      	adds	r4, #104	; 0x68
 8003352:	e7d9      	b.n	8003308 <__sfp+0x1c>
 8003354:	2104      	movs	r1, #4
 8003356:	4638      	mov	r0, r7
 8003358:	f7ff ff62 	bl	8003220 <__sfmoreglue>
 800335c:	4604      	mov	r4, r0
 800335e:	6030      	str	r0, [r6, #0]
 8003360:	2800      	cmp	r0, #0
 8003362:	d1d5      	bne.n	8003310 <__sfp+0x24>
 8003364:	f7ff ff78 	bl	8003258 <__sfp_lock_release>
 8003368:	230c      	movs	r3, #12
 800336a:	603b      	str	r3, [r7, #0]
 800336c:	e7ee      	b.n	800334c <__sfp+0x60>
 800336e:	bf00      	nop
 8003370:	08003708 	.word	0x08003708
 8003374:	ffff0001 	.word	0xffff0001

08003378 <_fwalk_reent>:
 8003378:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800337c:	4606      	mov	r6, r0
 800337e:	4688      	mov	r8, r1
 8003380:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003384:	2700      	movs	r7, #0
 8003386:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800338a:	f1b9 0901 	subs.w	r9, r9, #1
 800338e:	d505      	bpl.n	800339c <_fwalk_reent+0x24>
 8003390:	6824      	ldr	r4, [r4, #0]
 8003392:	2c00      	cmp	r4, #0
 8003394:	d1f7      	bne.n	8003386 <_fwalk_reent+0xe>
 8003396:	4638      	mov	r0, r7
 8003398:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800339c:	89ab      	ldrh	r3, [r5, #12]
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d907      	bls.n	80033b2 <_fwalk_reent+0x3a>
 80033a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80033a6:	3301      	adds	r3, #1
 80033a8:	d003      	beq.n	80033b2 <_fwalk_reent+0x3a>
 80033aa:	4629      	mov	r1, r5
 80033ac:	4630      	mov	r0, r6
 80033ae:	47c0      	blx	r8
 80033b0:	4307      	orrs	r7, r0
 80033b2:	3568      	adds	r5, #104	; 0x68
 80033b4:	e7e9      	b.n	800338a <_fwalk_reent+0x12>

080033b6 <__retarget_lock_init_recursive>:
 80033b6:	4770      	bx	lr

080033b8 <__retarget_lock_acquire_recursive>:
 80033b8:	4770      	bx	lr

080033ba <__retarget_lock_release_recursive>:
 80033ba:	4770      	bx	lr

080033bc <__swhatbuf_r>:
 80033bc:	b570      	push	{r4, r5, r6, lr}
 80033be:	460e      	mov	r6, r1
 80033c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033c4:	2900      	cmp	r1, #0
 80033c6:	b096      	sub	sp, #88	; 0x58
 80033c8:	4614      	mov	r4, r2
 80033ca:	461d      	mov	r5, r3
 80033cc:	da07      	bge.n	80033de <__swhatbuf_r+0x22>
 80033ce:	2300      	movs	r3, #0
 80033d0:	602b      	str	r3, [r5, #0]
 80033d2:	89b3      	ldrh	r3, [r6, #12]
 80033d4:	061a      	lsls	r2, r3, #24
 80033d6:	d410      	bmi.n	80033fa <__swhatbuf_r+0x3e>
 80033d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033dc:	e00e      	b.n	80033fc <__swhatbuf_r+0x40>
 80033de:	466a      	mov	r2, sp
 80033e0:	f000 f938 	bl	8003654 <_fstat_r>
 80033e4:	2800      	cmp	r0, #0
 80033e6:	dbf2      	blt.n	80033ce <__swhatbuf_r+0x12>
 80033e8:	9a01      	ldr	r2, [sp, #4]
 80033ea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80033ee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80033f2:	425a      	negs	r2, r3
 80033f4:	415a      	adcs	r2, r3
 80033f6:	602a      	str	r2, [r5, #0]
 80033f8:	e7ee      	b.n	80033d8 <__swhatbuf_r+0x1c>
 80033fa:	2340      	movs	r3, #64	; 0x40
 80033fc:	2000      	movs	r0, #0
 80033fe:	6023      	str	r3, [r4, #0]
 8003400:	b016      	add	sp, #88	; 0x58
 8003402:	bd70      	pop	{r4, r5, r6, pc}

08003404 <malloc>:
 8003404:	4b02      	ldr	r3, [pc, #8]	; (8003410 <malloc+0xc>)
 8003406:	4601      	mov	r1, r0
 8003408:	6818      	ldr	r0, [r3, #0]
 800340a:	f000 b853 	b.w	80034b4 <_malloc_r>
 800340e:	bf00      	nop
 8003410:	2000000c 	.word	0x2000000c

08003414 <_free_r>:
 8003414:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003416:	2900      	cmp	r1, #0
 8003418:	d048      	beq.n	80034ac <_free_r+0x98>
 800341a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800341e:	9001      	str	r0, [sp, #4]
 8003420:	2b00      	cmp	r3, #0
 8003422:	f1a1 0404 	sub.w	r4, r1, #4
 8003426:	bfb8      	it	lt
 8003428:	18e4      	addlt	r4, r4, r3
 800342a:	f000 f937 	bl	800369c <__malloc_lock>
 800342e:	4a20      	ldr	r2, [pc, #128]	; (80034b0 <_free_r+0x9c>)
 8003430:	9801      	ldr	r0, [sp, #4]
 8003432:	6813      	ldr	r3, [r2, #0]
 8003434:	4615      	mov	r5, r2
 8003436:	b933      	cbnz	r3, 8003446 <_free_r+0x32>
 8003438:	6063      	str	r3, [r4, #4]
 800343a:	6014      	str	r4, [r2, #0]
 800343c:	b003      	add	sp, #12
 800343e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003442:	f000 b931 	b.w	80036a8 <__malloc_unlock>
 8003446:	42a3      	cmp	r3, r4
 8003448:	d90b      	bls.n	8003462 <_free_r+0x4e>
 800344a:	6821      	ldr	r1, [r4, #0]
 800344c:	1862      	adds	r2, r4, r1
 800344e:	4293      	cmp	r3, r2
 8003450:	bf04      	itt	eq
 8003452:	681a      	ldreq	r2, [r3, #0]
 8003454:	685b      	ldreq	r3, [r3, #4]
 8003456:	6063      	str	r3, [r4, #4]
 8003458:	bf04      	itt	eq
 800345a:	1852      	addeq	r2, r2, r1
 800345c:	6022      	streq	r2, [r4, #0]
 800345e:	602c      	str	r4, [r5, #0]
 8003460:	e7ec      	b.n	800343c <_free_r+0x28>
 8003462:	461a      	mov	r2, r3
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	b10b      	cbz	r3, 800346c <_free_r+0x58>
 8003468:	42a3      	cmp	r3, r4
 800346a:	d9fa      	bls.n	8003462 <_free_r+0x4e>
 800346c:	6811      	ldr	r1, [r2, #0]
 800346e:	1855      	adds	r5, r2, r1
 8003470:	42a5      	cmp	r5, r4
 8003472:	d10b      	bne.n	800348c <_free_r+0x78>
 8003474:	6824      	ldr	r4, [r4, #0]
 8003476:	4421      	add	r1, r4
 8003478:	1854      	adds	r4, r2, r1
 800347a:	42a3      	cmp	r3, r4
 800347c:	6011      	str	r1, [r2, #0]
 800347e:	d1dd      	bne.n	800343c <_free_r+0x28>
 8003480:	681c      	ldr	r4, [r3, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	6053      	str	r3, [r2, #4]
 8003486:	4421      	add	r1, r4
 8003488:	6011      	str	r1, [r2, #0]
 800348a:	e7d7      	b.n	800343c <_free_r+0x28>
 800348c:	d902      	bls.n	8003494 <_free_r+0x80>
 800348e:	230c      	movs	r3, #12
 8003490:	6003      	str	r3, [r0, #0]
 8003492:	e7d3      	b.n	800343c <_free_r+0x28>
 8003494:	6825      	ldr	r5, [r4, #0]
 8003496:	1961      	adds	r1, r4, r5
 8003498:	428b      	cmp	r3, r1
 800349a:	bf04      	itt	eq
 800349c:	6819      	ldreq	r1, [r3, #0]
 800349e:	685b      	ldreq	r3, [r3, #4]
 80034a0:	6063      	str	r3, [r4, #4]
 80034a2:	bf04      	itt	eq
 80034a4:	1949      	addeq	r1, r1, r5
 80034a6:	6021      	streq	r1, [r4, #0]
 80034a8:	6054      	str	r4, [r2, #4]
 80034aa:	e7c7      	b.n	800343c <_free_r+0x28>
 80034ac:	b003      	add	sp, #12
 80034ae:	bd30      	pop	{r4, r5, pc}
 80034b0:	20000090 	.word	0x20000090

080034b4 <_malloc_r>:
 80034b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034b6:	1ccd      	adds	r5, r1, #3
 80034b8:	f025 0503 	bic.w	r5, r5, #3
 80034bc:	3508      	adds	r5, #8
 80034be:	2d0c      	cmp	r5, #12
 80034c0:	bf38      	it	cc
 80034c2:	250c      	movcc	r5, #12
 80034c4:	2d00      	cmp	r5, #0
 80034c6:	4606      	mov	r6, r0
 80034c8:	db01      	blt.n	80034ce <_malloc_r+0x1a>
 80034ca:	42a9      	cmp	r1, r5
 80034cc:	d903      	bls.n	80034d6 <_malloc_r+0x22>
 80034ce:	230c      	movs	r3, #12
 80034d0:	6033      	str	r3, [r6, #0]
 80034d2:	2000      	movs	r0, #0
 80034d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034d6:	f000 f8e1 	bl	800369c <__malloc_lock>
 80034da:	4921      	ldr	r1, [pc, #132]	; (8003560 <_malloc_r+0xac>)
 80034dc:	680a      	ldr	r2, [r1, #0]
 80034de:	4614      	mov	r4, r2
 80034e0:	b99c      	cbnz	r4, 800350a <_malloc_r+0x56>
 80034e2:	4f20      	ldr	r7, [pc, #128]	; (8003564 <_malloc_r+0xb0>)
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	b923      	cbnz	r3, 80034f2 <_malloc_r+0x3e>
 80034e8:	4621      	mov	r1, r4
 80034ea:	4630      	mov	r0, r6
 80034ec:	f000 f83c 	bl	8003568 <_sbrk_r>
 80034f0:	6038      	str	r0, [r7, #0]
 80034f2:	4629      	mov	r1, r5
 80034f4:	4630      	mov	r0, r6
 80034f6:	f000 f837 	bl	8003568 <_sbrk_r>
 80034fa:	1c43      	adds	r3, r0, #1
 80034fc:	d123      	bne.n	8003546 <_malloc_r+0x92>
 80034fe:	230c      	movs	r3, #12
 8003500:	6033      	str	r3, [r6, #0]
 8003502:	4630      	mov	r0, r6
 8003504:	f000 f8d0 	bl	80036a8 <__malloc_unlock>
 8003508:	e7e3      	b.n	80034d2 <_malloc_r+0x1e>
 800350a:	6823      	ldr	r3, [r4, #0]
 800350c:	1b5b      	subs	r3, r3, r5
 800350e:	d417      	bmi.n	8003540 <_malloc_r+0x8c>
 8003510:	2b0b      	cmp	r3, #11
 8003512:	d903      	bls.n	800351c <_malloc_r+0x68>
 8003514:	6023      	str	r3, [r4, #0]
 8003516:	441c      	add	r4, r3
 8003518:	6025      	str	r5, [r4, #0]
 800351a:	e004      	b.n	8003526 <_malloc_r+0x72>
 800351c:	6863      	ldr	r3, [r4, #4]
 800351e:	42a2      	cmp	r2, r4
 8003520:	bf0c      	ite	eq
 8003522:	600b      	streq	r3, [r1, #0]
 8003524:	6053      	strne	r3, [r2, #4]
 8003526:	4630      	mov	r0, r6
 8003528:	f000 f8be 	bl	80036a8 <__malloc_unlock>
 800352c:	f104 000b 	add.w	r0, r4, #11
 8003530:	1d23      	adds	r3, r4, #4
 8003532:	f020 0007 	bic.w	r0, r0, #7
 8003536:	1ac2      	subs	r2, r0, r3
 8003538:	d0cc      	beq.n	80034d4 <_malloc_r+0x20>
 800353a:	1a1b      	subs	r3, r3, r0
 800353c:	50a3      	str	r3, [r4, r2]
 800353e:	e7c9      	b.n	80034d4 <_malloc_r+0x20>
 8003540:	4622      	mov	r2, r4
 8003542:	6864      	ldr	r4, [r4, #4]
 8003544:	e7cc      	b.n	80034e0 <_malloc_r+0x2c>
 8003546:	1cc4      	adds	r4, r0, #3
 8003548:	f024 0403 	bic.w	r4, r4, #3
 800354c:	42a0      	cmp	r0, r4
 800354e:	d0e3      	beq.n	8003518 <_malloc_r+0x64>
 8003550:	1a21      	subs	r1, r4, r0
 8003552:	4630      	mov	r0, r6
 8003554:	f000 f808 	bl	8003568 <_sbrk_r>
 8003558:	3001      	adds	r0, #1
 800355a:	d1dd      	bne.n	8003518 <_malloc_r+0x64>
 800355c:	e7cf      	b.n	80034fe <_malloc_r+0x4a>
 800355e:	bf00      	nop
 8003560:	20000090 	.word	0x20000090
 8003564:	20000094 	.word	0x20000094

08003568 <_sbrk_r>:
 8003568:	b538      	push	{r3, r4, r5, lr}
 800356a:	4d06      	ldr	r5, [pc, #24]	; (8003584 <_sbrk_r+0x1c>)
 800356c:	2300      	movs	r3, #0
 800356e:	4604      	mov	r4, r0
 8003570:	4608      	mov	r0, r1
 8003572:	602b      	str	r3, [r5, #0]
 8003574:	f7fd fac8 	bl	8000b08 <_sbrk>
 8003578:	1c43      	adds	r3, r0, #1
 800357a:	d102      	bne.n	8003582 <_sbrk_r+0x1a>
 800357c:	682b      	ldr	r3, [r5, #0]
 800357e:	b103      	cbz	r3, 8003582 <_sbrk_r+0x1a>
 8003580:	6023      	str	r3, [r4, #0]
 8003582:	bd38      	pop	{r3, r4, r5, pc}
 8003584:	20000138 	.word	0x20000138

08003588 <__sread>:
 8003588:	b510      	push	{r4, lr}
 800358a:	460c      	mov	r4, r1
 800358c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003590:	f000 f890 	bl	80036b4 <_read_r>
 8003594:	2800      	cmp	r0, #0
 8003596:	bfab      	itete	ge
 8003598:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800359a:	89a3      	ldrhlt	r3, [r4, #12]
 800359c:	181b      	addge	r3, r3, r0
 800359e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80035a2:	bfac      	ite	ge
 80035a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80035a6:	81a3      	strhlt	r3, [r4, #12]
 80035a8:	bd10      	pop	{r4, pc}

080035aa <__swrite>:
 80035aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035ae:	461f      	mov	r7, r3
 80035b0:	898b      	ldrh	r3, [r1, #12]
 80035b2:	05db      	lsls	r3, r3, #23
 80035b4:	4605      	mov	r5, r0
 80035b6:	460c      	mov	r4, r1
 80035b8:	4616      	mov	r6, r2
 80035ba:	d505      	bpl.n	80035c8 <__swrite+0x1e>
 80035bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035c0:	2302      	movs	r3, #2
 80035c2:	2200      	movs	r2, #0
 80035c4:	f000 f858 	bl	8003678 <_lseek_r>
 80035c8:	89a3      	ldrh	r3, [r4, #12]
 80035ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80035ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80035d2:	81a3      	strh	r3, [r4, #12]
 80035d4:	4632      	mov	r2, r6
 80035d6:	463b      	mov	r3, r7
 80035d8:	4628      	mov	r0, r5
 80035da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80035de:	f000 b817 	b.w	8003610 <_write_r>

080035e2 <__sseek>:
 80035e2:	b510      	push	{r4, lr}
 80035e4:	460c      	mov	r4, r1
 80035e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035ea:	f000 f845 	bl	8003678 <_lseek_r>
 80035ee:	1c43      	adds	r3, r0, #1
 80035f0:	89a3      	ldrh	r3, [r4, #12]
 80035f2:	bf15      	itete	ne
 80035f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80035f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80035fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80035fe:	81a3      	strheq	r3, [r4, #12]
 8003600:	bf18      	it	ne
 8003602:	81a3      	strhne	r3, [r4, #12]
 8003604:	bd10      	pop	{r4, pc}

08003606 <__sclose>:
 8003606:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800360a:	f000 b813 	b.w	8003634 <_close_r>
	...

08003610 <_write_r>:
 8003610:	b538      	push	{r3, r4, r5, lr}
 8003612:	4d07      	ldr	r5, [pc, #28]	; (8003630 <_write_r+0x20>)
 8003614:	4604      	mov	r4, r0
 8003616:	4608      	mov	r0, r1
 8003618:	4611      	mov	r1, r2
 800361a:	2200      	movs	r2, #0
 800361c:	602a      	str	r2, [r5, #0]
 800361e:	461a      	mov	r2, r3
 8003620:	f7fd f8e8 	bl	80007f4 <_write>
 8003624:	1c43      	adds	r3, r0, #1
 8003626:	d102      	bne.n	800362e <_write_r+0x1e>
 8003628:	682b      	ldr	r3, [r5, #0]
 800362a:	b103      	cbz	r3, 800362e <_write_r+0x1e>
 800362c:	6023      	str	r3, [r4, #0]
 800362e:	bd38      	pop	{r3, r4, r5, pc}
 8003630:	20000138 	.word	0x20000138

08003634 <_close_r>:
 8003634:	b538      	push	{r3, r4, r5, lr}
 8003636:	4d06      	ldr	r5, [pc, #24]	; (8003650 <_close_r+0x1c>)
 8003638:	2300      	movs	r3, #0
 800363a:	4604      	mov	r4, r0
 800363c:	4608      	mov	r0, r1
 800363e:	602b      	str	r3, [r5, #0]
 8003640:	f7fd f904 	bl	800084c <_close>
 8003644:	1c43      	adds	r3, r0, #1
 8003646:	d102      	bne.n	800364e <_close_r+0x1a>
 8003648:	682b      	ldr	r3, [r5, #0]
 800364a:	b103      	cbz	r3, 800364e <_close_r+0x1a>
 800364c:	6023      	str	r3, [r4, #0]
 800364e:	bd38      	pop	{r3, r4, r5, pc}
 8003650:	20000138 	.word	0x20000138

08003654 <_fstat_r>:
 8003654:	b538      	push	{r3, r4, r5, lr}
 8003656:	4d07      	ldr	r5, [pc, #28]	; (8003674 <_fstat_r+0x20>)
 8003658:	2300      	movs	r3, #0
 800365a:	4604      	mov	r4, r0
 800365c:	4608      	mov	r0, r1
 800365e:	4611      	mov	r1, r2
 8003660:	602b      	str	r3, [r5, #0]
 8003662:	f7fd f943 	bl	80008ec <_fstat>
 8003666:	1c43      	adds	r3, r0, #1
 8003668:	d102      	bne.n	8003670 <_fstat_r+0x1c>
 800366a:	682b      	ldr	r3, [r5, #0]
 800366c:	b103      	cbz	r3, 8003670 <_fstat_r+0x1c>
 800366e:	6023      	str	r3, [r4, #0]
 8003670:	bd38      	pop	{r3, r4, r5, pc}
 8003672:	bf00      	nop
 8003674:	20000138 	.word	0x20000138

08003678 <_lseek_r>:
 8003678:	b538      	push	{r3, r4, r5, lr}
 800367a:	4d07      	ldr	r5, [pc, #28]	; (8003698 <_lseek_r+0x20>)
 800367c:	4604      	mov	r4, r0
 800367e:	4608      	mov	r0, r1
 8003680:	4611      	mov	r1, r2
 8003682:	2200      	movs	r2, #0
 8003684:	602a      	str	r2, [r5, #0]
 8003686:	461a      	mov	r2, r3
 8003688:	f7fd f8f7 	bl	800087a <_lseek>
 800368c:	1c43      	adds	r3, r0, #1
 800368e:	d102      	bne.n	8003696 <_lseek_r+0x1e>
 8003690:	682b      	ldr	r3, [r5, #0]
 8003692:	b103      	cbz	r3, 8003696 <_lseek_r+0x1e>
 8003694:	6023      	str	r3, [r4, #0]
 8003696:	bd38      	pop	{r3, r4, r5, pc}
 8003698:	20000138 	.word	0x20000138

0800369c <__malloc_lock>:
 800369c:	4801      	ldr	r0, [pc, #4]	; (80036a4 <__malloc_lock+0x8>)
 800369e:	f7ff be8b 	b.w	80033b8 <__retarget_lock_acquire_recursive>
 80036a2:	bf00      	nop
 80036a4:	20000130 	.word	0x20000130

080036a8 <__malloc_unlock>:
 80036a8:	4801      	ldr	r0, [pc, #4]	; (80036b0 <__malloc_unlock+0x8>)
 80036aa:	f7ff be86 	b.w	80033ba <__retarget_lock_release_recursive>
 80036ae:	bf00      	nop
 80036b0:	20000130 	.word	0x20000130

080036b4 <_read_r>:
 80036b4:	b538      	push	{r3, r4, r5, lr}
 80036b6:	4d07      	ldr	r5, [pc, #28]	; (80036d4 <_read_r+0x20>)
 80036b8:	4604      	mov	r4, r0
 80036ba:	4608      	mov	r0, r1
 80036bc:	4611      	mov	r1, r2
 80036be:	2200      	movs	r2, #0
 80036c0:	602a      	str	r2, [r5, #0]
 80036c2:	461a      	mov	r2, r3
 80036c4:	f7fd f8ea 	bl	800089c <_read>
 80036c8:	1c43      	adds	r3, r0, #1
 80036ca:	d102      	bne.n	80036d2 <_read_r+0x1e>
 80036cc:	682b      	ldr	r3, [r5, #0]
 80036ce:	b103      	cbz	r3, 80036d2 <_read_r+0x1e>
 80036d0:	6023      	str	r3, [r4, #0]
 80036d2:	bd38      	pop	{r3, r4, r5, pc}
 80036d4:	20000138 	.word	0x20000138

080036d8 <_init>:
 80036d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036da:	bf00      	nop
 80036dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036de:	bc08      	pop	{r3}
 80036e0:	469e      	mov	lr, r3
 80036e2:	4770      	bx	lr

080036e4 <_fini>:
 80036e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036e6:	bf00      	nop
 80036e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036ea:	bc08      	pop	{r3}
 80036ec:	469e      	mov	lr, r3
 80036ee:	4770      	bx	lr
